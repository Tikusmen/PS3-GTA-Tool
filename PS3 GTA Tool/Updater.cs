using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Windows.Forms;
using PS3Lib;

namespace PS3_GTA_Tool
{
    class Updater
    {
        public static PS3API PS3 = Form1.PS3;
        public static byte[] found = new byte[33488896];
        public static byte[] memoryBytes = new byte[33554432];
        public static decimal ver = 0;
        public static string result = "Complete!";
        public static System.Drawing.Color resColor = System.Drawing.Color.Green;
        public static string rpcSaved;
        public static string rtmSaved;
        public static string nativesSaved;

        public static void UpdateRPC(string dir)
        {
            decimal update = 0;
            string currentUpdate = Microsoft.VisualBasic.Interaction.InputBox("Which Update Is The New Version?", "Update Version?", "1.XX");
            if (currentUpdate.Contains(" ")) { update = Convert.ToDecimal(currentUpdate.Replace(" ", "")); }
            else if (currentUpdate == "") { ;}

            else
            {
                try
                {
                    update = Convert.ToDecimal(currentUpdate);
                    if (update == 0) { MessageBox.Show("Update Version Was Entered Incorrectly", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
                }
                catch (Exception)
                {
                    MessageBox.Show("Update Version Was Entered Incorrectly", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    result = "Error!";
                    resColor = System.Drawing.Color.Red;
                    return;
                }
            }

            Application.DoEvents();

            ver = update;
            byte[] sfa = { 0x28, 0x8A, 0xC1, 0x9E, 0x38, 0x8B, 0xC1, 0x9C, 0xB3, 0x67, 0x0E, 0xA8 };
            PS3.GetMemory(0x10000, found);

            uint SFA1_U = ContainsSequence(found, sfa, 0x10000);
            SFA1_U += 0x10000;
            string SFA1_S = Convert.ToString(SFA1_U, 16);

            uint EFA1_U = SFA1_U + 0x88;
            string EFA1_S = Convert.ToString(EFA1_U, 16);

            uint SFA2_U = SFA1_U + 0x100;
            string SFA2_S = Convert.ToString(SFA2_U, 16);

            uint EFA2_U = SFA2_U + 0x88;
            string EFA2_S = Convert.ToString(EFA2_U, 16);

            uint SFA3_U = SFA1_U + 0x200;
            string SFA3_S = Convert.ToString(SFA3_U, 16);

            uint EFA3_U = SFA3_U + 0x88;
            string EFA3_S = Convert.ToString(EFA3_U, 16);

            byte[] bfa1 = { 0x48, 0x00, 0x00, 0x0C, 0x40, 0x99, 0x00, 0x08, 0x41, 0x9D, 0x00, 0x7C };
            uint BFA1_U = ContainsSequence(found, bfa1, 0x10000);
            string BFA1_S = Convert.ToString(BFA1_U, 16);

            uint BAB1_U = BFA1_U + 0xC;
            string BAB1_S = Convert.ToString(BAB1_U, 16);

            byte[] bfa2 = { 0x7F, 0xBE, 0x07, 0xB4, 0x1C, 0x7E, 0x03, 0x34 };
            uint BFA2_U = ContainsSequence(found, bfa2, 0x10000) - 0x8;
            string BFA2_S = Convert.ToString(BFA2_U, 16);

            uint BAB2_U = BFA2_U + 0x8;
            string BAB2_S = Convert.ToString(BAB2_U, 16);

            byte[] bfa3 = { 0x38, 0x60, 0x00, 0x21, 0x80, 0xD7, 0x00, 0x00 };
            uint BFA3_U = ContainsSequence(found, bfa3, 0x10000) - 0x8;
            string BFA3_S = Convert.ToString(BFA3_U, 16);

            uint BAB3_U = BFA3_U + 0x8;
            string BAB3_S = Convert.ToString(BAB3_U, 16);

            if (File.Exists(dir))
            {
                String[] pathSeparators = new String[] { @"\" };
                string[] split = dir.Split(pathSeparators, StringSplitOptions.None);
                if (!File.Exists(Directory.GetCurrentDirectory() + @"\Resources\" + rpcSaved))
                {
                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + @"\Resources\" + rpcSaved);
                }
                File.Move(dir, Directory.GetCurrentDirectory() + @"\Resources\" + rpcSaved + @"\" + split[split.Length - 1]);
            }

            StreamWriter sw = new StreamWriter(dir);
            sw.AutoFlush = true;
            sw.WriteLine("[" + update.ToString() + "]");
            sw.WriteLine("SFA1 = " + "0x" + SFA1_S.ToUpper());
            sw.WriteLine("EFA1 = " + "0x" + EFA1_S.ToUpper());
            sw.WriteLine("SFA2 = " + "0x" + SFA2_S.ToUpper());
            sw.WriteLine("EFA2 = " + "0x" + EFA2_S.ToUpper());
            sw.WriteLine("SFA3 = " + "0x" + SFA3_S.ToUpper());
            sw.WriteLine("EFA3 = " + "0x" + EFA3_S.ToUpper());
            sw.WriteLine("BFA1 = " + "0x" + BFA1_S.ToUpper());
            sw.WriteLine("BAB1 = " + "0x" + BAB1_S.ToUpper());
            sw.WriteLine("BFA2 = " + "0x" + BFA2_S.ToUpper());
            sw.WriteLine("BAB2 = " + "0x" + BAB2_S.ToUpper());
            sw.WriteLine("BFA3 = " + "0x" + BFA3_S.ToUpper());
            sw.WriteLine("BAB3 = " + "0x" + BAB3_S.ToUpper());
            sw.WriteLine("rpcEnableOffset = " + "0x" + SFA1_S.ToUpper());
            sw.WriteLine("rpcEnableValue = 0xF821FF91");
            sw.Close();

            Application.DoEvents();
        }

        public static void UpdateRTM(string dir)
        {
            Application.DoEvents();

            byte[] ammo1 = new byte[] { 0x63, 0xFD, 0x00, 0x00, 0x93, 0xBE, 0x00, 0x10, 0x38, 0x21, 0x00, 0x90 };
            uint ammo1_U = Search(found, ammo1, 0x10000);
            string ammo1_S = Convert.ToString(ammo1_U, 16);

            byte[] ammo2 = new byte[] { 0x60, 0x87, 0x00, 0x00, 0xB0, 0xFE, 0x00, 0x52, 0x7C, 0x9F, 0x00, 0xD0 };
            uint ammo2_U = Search(found, ammo2, 0x10000);
            string ammo2_S = Convert.ToString(ammo2_U, 16);

            byte[] animal1 = new byte[] { 0x2C, 0x05, 0x00, 0x01, 0x40, 0x82, 0x00, 0xC0, 0x83, 0x63, 0x00, 0x28 };
            uint animal1_U = Search(found, animal1, 0x10000);
            string animal1_S = Convert.ToString(animal1_U, 16);

            byte[] animal2 = new byte[] { 0x2C, 0x04, 0x00, 0x01, 0x40, 0x82, 0x01, 0x3C, 0x83, 0x43, 0x00, 0x28 };
            uint animal2_U = Search(found, animal2, 0x10000);
            string animal2_S = Convert.ToString(animal2_U, 16);

            byte[] animal3 = new byte[] { 0x40, 0x82, 0x00, 0x10, 0x3C, 0x60, 0x01, 0xDD };
            uint animal3_U = SpecifiedSearch(found, animal3, 0x10000, 2);
            string animal3_S = Convert.ToString(animal3_U, 16);

            byte[] cops = new byte[] { 0x81, 0x7D, 0x00, 0x04 };
            uint cops_U = SpecifiedSearch(found, cops, 0x10000, 2); //old num was 3
            string cops_S = Convert.ToString(cops_U, 16);

            byte[] gmode = new byte[] { 252, 1, 16, 0, 65, 128, 1, 20 };
            uint GMOffset_U = Search(found, gmode, 0x10000);
            string GMOffset_S = Convert.ToString(GMOffset_U, 16);

            byte[] waypoint = new byte[] { 71, 122, 0, 0, 71, 122, 0, 0, 71, 122, 0, 0, 0, 0, 0, 0, 71, 122, 0, 0, 71, 122, 0, 0, 71, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            uint WPOffsetX_U = Search(found, waypoint, 0x10000);
            string WPOffsetX_S = Convert.ToString(WPOffsetX_U, 16);
            uint WPOffsetY_U = WPOffsetX_U + 0x04;
            string WPOffsetY_S = Convert.ToString(WPOffsetY_U, 16);

            if (File.Exists(dir))
            {
                String[] pathSeparators = new String[] { @"\" };
                string[] split = dir.Split(pathSeparators, StringSplitOptions.None);
                if (!File.Exists(Directory.GetCurrentDirectory() + @"\Resources\" + rtmSaved))
                {
                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + @"\Resources\" + rtmSaved);
                }
                File.Move(dir, Directory.GetCurrentDirectory() + @"\Resources\" + rtmSaved + @"\" + split[split.Length - 1]);
            }

            StreamWriter sw = new StreamWriter(dir);
            sw.AutoFlush = true;
            sw.WriteLine("[" + ver.ToString() + "]");
            sw.WriteLine("ammoOffset1 = " + "0x" + ammo1_S.ToUpper());
            sw.WriteLine("ammoOffset2 = " + "0x" + ammo2_S.ToUpper());
            sw.WriteLine("animalFreezeFix1 = " + "0x" + animal1_S.ToUpper());
            sw.WriteLine("animalFreezeFix2 = " + "0x" + animal2_S.ToUpper());
            sw.WriteLine("animalFreezeFix3 = " + "0x" + animal3_S.ToUpper());
            sw.WriteLine("copsOffset = " + "0x" + cops_S.ToUpper());
            sw.WriteLine("godModeOffset = " + "0x" + GMOffset_S.ToUpper());
            sw.WriteLine("waypointX = " + "0x" + WPOffsetX_S.ToUpper());
            sw.WriteLine("waypointY = " + "0x" + WPOffsetY_S.ToUpper());
            sw.Close();

            Application.DoEvents();
        }

        public static void UpdateNatives(string dir)
        {
            Application.DoEvents();

            PS3.GetMemory(0x31000000, memoryBytes);
            if (File.Exists(dir))
            {
                String[] pathSeparators = new String[] { @"\" };
                string[] split = dir.Split(pathSeparators, StringSplitOptions.None);
                if (!File.Exists(Directory.GetCurrentDirectory() + @"\Resources\" + nativesSaved))
                {
                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + @"\Resources\" + nativesSaved);
                }
                File.Move(dir, Directory.GetCurrentDirectory() + @"\Resources\" + nativesSaved + @"\" + split[split.Length - 1]);
            }

            StreamWriter sw = new StreamWriter(dir);
            sw.AutoFlush = true;
            sw.WriteLine("[" + ver.ToString() + "]");
            Array.Sort(nativeNames);
            foreach (uint unk in unks)
            {
                uint func = DumpUnk(unk);
                if (func != 0) { sw.WriteLine("unk_0x" + unk.ToString("X2") + " = 0x" + func.ToString("X2")); }
                else sw.WriteLine("unk_0x" + unk.ToString("X2") + " = 0x0");
            }
            foreach (string native in nativeNames)
            {
                uint func = Dump(native);
                if (func != 0) { sw.WriteLine(native.ToUpper() + " = 0x" + func.ToString("X2")); }
                else sw.WriteLine(native.ToUpper() + " = 0x0");
            }
            sw.Close();

            Application.DoEvents();
        }

        public static uint ContainsSequence(byte[] toSearch, byte[] toFind, uint StartOffset)
        {
            int num = 0;
            while (num + toFind.Length < toSearch.Length)
            {
                bool flag = true;
                for (int index = 0; index <= toFind.Length - 1; index++)
                {
                    if (Convert.ToInt32(toSearch[num + index]) != Convert.ToInt32(toFind[index]))
                    {
                        flag = false;
                        break;
                    }
                }
                if (flag)
                {
                    return StartOffset + Convert.ToUInt32(num);
                }
                num += 4;
            }
            return 0u;
        }

        public static uint SpecifiedSearch(byte[] ToSearchIn, byte[] FindWhat, uint UsedOffsetToGetBytesFrom, int OffsetNumber)
        {
            uint num;
            int num1 = 0;
            uint usedOffsetToGetBytesFrom = 0;
            int num2 = 0;
            while (true)
            {
            Label0:
                if (num2 + (int)FindWhat.Length < (int)ToSearchIn.Length)
                {
                    bool flag = true;
                    int num3 = 0;
                    int length = (int)FindWhat.Length - 1;
                    int num4 = num3;
                    while (num4 <= length)
                    {
                        if (ToSearchIn[num2 + num4] == FindWhat[num4])
                        {
                            num4++;
                        }
                        else
                        {
                            flag = false;
                            if (flag)
                            {
                                num1++;
                                usedOffsetToGetBytesFrom = UsedOffsetToGetBytesFrom + (uint)num2;
                                if (!num1.Equals(OffsetNumber))
                                {
                                    num2 = num2 + 4;
                                    goto Label0;
                                }
                                else
                                {
                                    num = usedOffsetToGetBytesFrom;
                                    return num;
                                }
                            }
                            else
                            {
                                num2 = num2 + 4;
                                goto Label0;
                            }
                        }
                    }
                    if (flag)
                    {
                        num1++;
                        usedOffsetToGetBytesFrom = UsedOffsetToGetBytesFrom + (uint)num2;
                        num2 = num2 + 4;
                        if (num1.Equals(OffsetNumber))
                        {
                            num = usedOffsetToGetBytesFrom;
                            break;
                        }
                    }
                    else
                    {
                        num2 = num2 + 4;
                    }
                }
                else
                {
                    num = usedOffsetToGetBytesFrom;
                    break;
                }
            }
            return num;
        }

        public static uint Search(byte[] ToSearchIn, byte[] FindWhat, uint UsedOffsetToGetBytesFrom)
        {
            uint usedOffsetToGetBytesFrom;
            int num = 0;
            while (true)
            {
            Label0:
                if (num + (int)FindWhat.Length < (int)ToSearchIn.Length)
                {
                    bool flag = true;
                    int num1 = 0;
                    int length = (int)FindWhat.Length - 1;
                    int num2 = num1;
                    while (num2 <= length)
                    {
                        if (ToSearchIn[num + num2] == FindWhat[num2])
                        {
                            num2++;
                        }
                        else
                        {
                            flag = false;
                            if (flag)
                            {
                                usedOffsetToGetBytesFrom = UsedOffsetToGetBytesFrom + (uint)num;
                                return usedOffsetToGetBytesFrom;
                            }
                            else
                            {
                                num = num + 4;
                                goto Label0;
                            }
                        }
                    }
                    if (flag)
                    {
                        usedOffsetToGetBytesFrom = UsedOffsetToGetBytesFrom + (uint)num;
                        break;
                    }
                    else
                    {
                        num = num + 4;
                    }
                }
                else
                {
                    usedOffsetToGetBytesFrom = 0;
                    break;
                }
            }
            return usedOffsetToGetBytesFrom;
        }

        private static byte[] Get_Hash(string str)
        {
            byte[] d = Encoding.UTF8.GetBytes(str);
            uint num = 0u;
            for (int i = 0; i < d.Length; i++)
            {
                num += (uint)d[i];
                num += num << 10;
                num ^= num >> 6;
            }
            num += num << 3;
            num ^= num >> 11;
            byte[] bytes = BitConverter.GetBytes(num + (num << 15));
            Array.Reverse(bytes);
            return bytes;
        }

        private static uint GetBytes(uint num)
        {
            byte[] array = PS3.GetBytes(num, 4);
            Array.Reverse(array, 0, 4);
            return BitConverter.ToUInt32(array, 0);
        }

        private static uint LookHashInMemory(byte[] MemoryBytes, byte[] HashBytes, uint num)
        {
            bool ready = false; uint Return = 0;
            try
            {
                for (int j = 0; HashBytes.Length < MemoryBytes.Length; j += 4)
                {
                    if (Convert.ToInt32(MemoryBytes[j + 0]) == Convert.ToInt32(HashBytes[0]))
                        if (Convert.ToInt32(MemoryBytes[j + 1]) == Convert.ToInt32(HashBytes[1]))
                            if (Convert.ToInt32(MemoryBytes[j + 2]) == Convert.ToInt32(HashBytes[2]))
                                if (Convert.ToInt32(MemoryBytes[j + 3]) == Convert.ToInt32(HashBytes[3]))
                                { Return = num + Convert.ToUInt32(j); ready = true; break; }
                    if (ready)
                        break;
                }
            }
            catch { }
            return Return;
        }

        private static uint Method2(byte[] bytes, uint hash, byte bytes2)
        {
            bool ready = false; uint Return = 0;
            try
            {
                for (int i = 0; i < bytes.Length; i += 4)
                {
                    if (Convert.ToInt32(bytes[i]) == Convert.ToInt32(bytes2))
                        ready = true;
                    if (ready)
                    { Return = hash + Convert.ToUInt32(i); break; }
                }
            }
            catch { }
            return Return;
        }

        private static uint AddToFunc(uint bytes, uint Function)
        {
            return bytes + Function - 0x4C000001;
        }

        public static uint Dump(string Hash)
        {
            uint address = 0;
            byte[] hashBytes = Get_Hash(Hash);
            uint num = LookHashInMemory(memoryBytes, hashBytes, 0x31000000);
            if (num > 0)
            {
                uint num2 = GetBytes(num - 32);
                if (num2 > 0x1000000 && num2 < 0x2000000)
                {
                    uint num3 = GetBytes(num2);
                    if (num3 > 0x1000000 && num3 < 0x2000000)
                    {
                        byte[] bytes2 = new byte[0x100];
                        PS3.GetMemory(num3, bytes2);
                        uint num4 = Method2(bytes2, num3, (byte)74);
                        if (num4 != 0)
                        {
                            uint num9 = AddToFunc(GetBytes(num4), num4);
                            address = num9;
                        }
                    }
                }
            }
            return address;
        }

        public static uint DumpUnk(uint Hash)
        {
            uint address = 0;
            byte[] bytes = BitConverter.GetBytes(Hash);
            Array.Reverse(bytes);
            byte[] hashBytes = bytes;

            uint num = LookHashInMemory(memoryBytes, hashBytes, 0x31000000);
            if (num > 0)
            {
                uint num2 = GetBytes(num - 32);
                if (num2 > 0x1000000 && num2 < 0x2000000)
                {
                    uint num3 = GetBytes(num2);
                    if (num3 > 0x1000000 && num3 < 0x2000000)
                    {
                        byte[] bytes2 = new byte[0x100];
                        PS3.GetMemory(num3, bytes2);
                        uint num4 = Method2(bytes2, num3, (byte)74);
                        if (num4 != 0)
                        {
                            uint num9 = AddToFunc(GetBytes(num4), num4);
                            address = num9;
                        }
                    }
                }
            }
            return address;
        }

        public static uint[] unks = { 0x08F7AF78, 0x104DDE8D, 0x106BA127, 0x106C8317, 0x1084F2F4, 0x108F36CC, 0x10B6AB36, 0x10DE5150, 0x10F2C023, 0x110752B2, 0x1126E37C, 0x1128A45B, 0x112D637A, 0x1134F68B, 0x11378777, 0x113DF5FD, 0x113EAE4, 0x11427401, 0x11718507, 0x1185F9B, 0x1193ED6E, 0x11A178B8, 0x11D09737, 0x11DC0F27, 0x11E8B5CD, 0x11F38FB3, 0x12077738, 0x123E5B90, 0x127310EB, 0x128C3873, 0x12929BDF, 0x12AC1A16, 0x132B6D92, 0x132CA01E, 0x13301529, 0x133FF2D5, 0x135E7AD4, 0x13777A0B, 0x137E3E24, 0x1393D16, 0x139C0875, 0x13B4F72, 0x13BC46C0, 0x13D4ABC0, 0x13E7A5A9, 0x13EB5861, 0x141CC936, 0x142C8F76, 0x144AAF22, 0x14680A60, 0x14FE9264, 0x150E03B6, 0x1544B29F, 0x155465EE, 0x1572022A, 0x1582162C, 0x159751B4, 0x159FE39C, 0x15D40761, 0x15E141CE, 0x1604C2F5, 0x161780C1, 0x16184FB5, 0x1683FE66, 0x16AED87B, 0x16D7AF9, 0x16E53875, 0x16F464B6, 0x16FB88B5, 0x170C6E1, 0x170F68C, 0x1720ABA6, 0x173F2EB3, 0x177EFC79, 0x1784BA1A, 0x1789437B, 0x17B0A1CD, 0x17CBC608, 0x17E6777, 0x17FF9393, 0x183A66C, 0x1856D008, 0x187B9070, 0x18867C61, 0x18B012B7, 0x18C9DE8D, 0x18DD76A1, 0x18F03AFD, 0x1900628D, 0x19198A16, 0x19266913, 0x19297A7A, 0x196444BB, 0x196BA503, 0x1984A5D1, 0x1984F88D, 0x198F32D7, 0x199DED14, 0x199FABF0, 0x19B17769, 0x19B27825, 0x19EAE282, 0x19EC65D9, 0x19EE0CCB, 0x19F0C471, 0x19FCBBB2, 0x1A1A72EF, 0x1A332D2D, 0x1A3EA6CD, 0x1A40454B, 0x1A4318F7, 0x1A464167, 0x1A66945F, 0x1A83A1B9, 0x1A900C84, 0x1AA3A0D5, 0x1AC97138, 0x1B3521F4, 0x1B91CD0, 0x1BAA7182, 0x1BCD3DDF, 0x1C0C5E4C, 0x1C0CAE89, 0x1C4F9FDB, 0x1C576388, 0x1C5CCC3A, 0x1C65B038, 0x1C68D9DC, 0x1C70B2EB, 0x1CAAFCC, 0x1CF139C6, 0x1CF89DA5, 0x1CFB3F51, 0x1D371529, 0x1D6859CA, 0x1D766976, 0x1D87DDC1, 0x1D980479, 0x1D99F676, 0x1DA7E41A, 0x1DD55F13, 0x1DEBCB45, 0x1DFE8D8A, 0x1E28B28F, 0x1E34953F, 0x1E359CC8, 0x1E3A3126, 0x1E54DB12, 0x1E58A7AD, 0x1E5F6AEF, 0x1E63088A, 0x1E7DA95E, 0x1E82C2AE, 0x1EBB6F3D, 0x1ECD23E7, 0x1EFFB02A, 0x1F0DD8AF, 0x1F2F7D00, 0x1F375B4C, 0x1F38102E, 0x1F3B035, 0x1F3CADB0, 0x1F63B042, 0x1F6B4B13, 0x1F88819D, 0x1F938864, 0x1F950E4B, 0x1F9DE6E4, 0x1FDC75DC, 0x1FE547F2, 0x1FFBEFC5, 0x2048A7DD, 0x20497DE, 0x20527695, 0x2056A015, 0x20871FD7, 0x208DD848, 0x20AB5783, 0x20AB933A, 0x20BFF6E5, 0x20DDCF2F, 0x20E4FFD9, 0x20EABD0F, 0x20FD3E87, 0x211DEFEC, 0x213C6D36, 0x215ABBE8, 0x21636EE, 0x21645D0A, 0x2180AE13, 0x21D275DA, 0x21D5A94, 0x21DBF0C9, 0x21F51560, 0x21F5B36, 0x224A3488, 0x226B08EA, 0x2276DE0D, 0x22804C20, 0x228A2598, 0x22A430, 0x22B9F132, 0x22BE2423, 0x22CA9F2A, 0x22DAE257, 0x22E03AD0, 0x22E9A9DE, 0x22E9F555, 0x231CFD12, 0x233DE879, 0x2349373B, 0x239272BD, 0x239C1D4E, 0x23BE6432, 0x23BF0F9B, 0x23D70C39, 0x23E3F106, 0x242C6A04, 0x242D88E, 0x2465296D, 0x249BC876, 0x249C1B9A, 0x249EB4EB, 0x24A1284E, 0x24A4E0B2, 0x24A7A7F6, 0x24A97AF8, 0x24D84334, 0x24DD4929, 0x24F873FB, 0x253286, 0x2569C9A7, 0x25915CB9, 0x25A2CABC, 0x25CDDB66, 0x25D569EB, 0x25E2DBA9, 0x25EA2AA5, 0x25EC28C0, 0x264B45DE, 0x2678342A, 0x267FCEAD, 0x26FCFB96, 0x2701A9AD, 0x2705C4D5, 0x273C6180, 0x274631FE, 0x27512BA0, 0x276A7807, 0x279077B0, 0x2798F56F, 0x27A244D8, 0x2849D4B2, 0x286F82CC, 0x287E86CB, 0x288AD228, 0x28924E98, 0x28A45454, 0x28C57FA0, 0x28D54A7F, 0x290421BE, 0x291C3B23, 0x291E938C, 0x2939D0B6, 0x294405D4, 0x2944A6C5, 0x29532731, 0x296574AE, 0x29CE8BAA, 0x29D3841, 0x29F97A71, 0x2A080C8, 0x2A32CB0, 0x2A3E5E8B, 0x2A60A90E, 0x2A6CC9F2, 0x2A83083F, 0x2A9411DA, 0x2AD2EC51, 0x2AE35169, 0x2AFB14B8, 0x2B0F05CD, 0x2B240E0A, 0x2B2FCC28, 0x2B757E6C, 0x2B7B57B3, 0x2B9D91E8, 0x2BA7AC2, 0x2BC93264, 0x2BCAF9B, 0x2BEE1F45, 0x2BEFB6C4, 0x2C1D6C31, 0x2C2B0C46, 0x2C959AF9, 0x2CD26D69, 0x2CDA5012, 0x2CEDE6C5, 0x2CFB0E6D, 0x2D33F15A, 0x2D7787BC, 0x2D817A5E, 0x2D947814, 0x2DAD93F, 0x2DB9EAB5, 0x2DBF2D7, 0x2DE48DA1, 0x2DE69817, 0x2DED2B8, 0x2DF7AF4, 0x2DFD35C7, 0x2E51C61C, 0x2E7D9B98, 0x2E80DB52, 0x2E9D628C, 0x2EC19A8B, 0x2ED5E2F8, 0x2EEDB18F, 0x2EF8435C, 0x2F0A16D1, 0x2F0D0973, 0x2F0E171C, 0x2F283CE, 0x2F28F0A6, 0x2F29F0D5, 0x2F38B526, 0x2F5F1D1, 0x2F7836E2, 0x2F9550C2, 0x2F98B405, 0x2F98B4B7, 0x2F9A309C, 0x2FB9F53C, 0x2FF65C0B, 0x2FFD2FA5, 0x3001EA86, 0x30510511, 0x30558CFD, 0x30572945, 0x307E7611, 0x308ED0EC, 0x308EDF6, 0x30ADE541, 0x30B3EC0A, 0x30B51753, 0x30B98369, 0x30D72A4B, 0x30DA1DA1, 0x30F43FE3, 0x31002201, 0x317775DF, 0x31A630A4, 0x3225BA3, 0x3242F952, 0x324FA47A, 0x3276D9D3, 0x3287FD2, 0x32A4EB22, 0x32B7A076, 0x32BF9598, 0x3301EA47, 0x331AEABF, 0x331D9A27, 0x3330175B, 0x334B9364, 0x334EFD46, 0x335695CF, 0x3369DD1F, 0x336F3D35, 0x33951005, 0x33B0B007, 0x33C20BC4, 0x33D6868F, 0x33F43FA, 0x342FA2B4, 0x343B27E2, 0x343B4DE0, 0x3461981, 0x346B506C, 0x347B4436, 0x34883DE3, 0x34A396EE, 0x34E02FCD, 0x3507D253, 0x353E8056, 0x3543019E, 0x3551727A, 0x3554AA0E, 0x35614622, 0x35721A08, 0x3589452B, 0x358D1D77, 0x35A8AE60, 0x35BCA844, 0x3612110D, 0x362E69AD, 0x365C50EE, 0x36A4AC65, 0x36A5F2DA, 0x36EAD960, 0x36FB8B3F, 0x371BBA08, 0x373CC405, 0x374F42F0, 0x37877757, 0x37A28C26, 0x37BC6ACB, 0x37C388DB, 0x37D152BB, 0x37DBC2AD, 0x37DD48B5, 0x37F5BD93, 0x37FBA7BC, 0x386CE0B8, 0x386F0D25, 0x38992E83, 0x38BC35C8, 0x38F82261, 0x38FC2EEB, 0x3939B8D, 0x395D18B1, 0x3968E915, 0x3970B0DA, 0x3972551F, 0x39771F21, 0x397F06E3, 0x3993092B, 0x39A3CC6F, 0x39AA9FC8, 0x3A68AA46, 0x3A7E5FB6, 0x3A8F1BF7, 0x3AA39BE9, 0x3AC9CB55, 0x3ACE6D6B, 0x3ADA414E, 0x3AF34DEF, 0x3B0CA391, 0x3B15D33C, 0x3B216749, 0x3B4EF322, 0x3B51B348, 0x3B637AA7, 0x3B74095C, 0x3B882533, 0x3BB12B75, 0x3BD3F458, 0x3BE1257F, 0x3C30B447, 0x3C395AEE, 0x3C3E2AB6, 0x3C44E4B, 0x3C5085E4, 0x3C806A2D, 0x3CD4307C, 0x3CE5BF6B, 0x3D081FE4, 0x3D26105F, 0x3D2C1916, 0x3D87600, 0x3D96A21C, 0x3D981EBF, 0x3DA7AA5D, 0x3DCF0092, 0x3DDEB0E6, 0x3E25A3C5, 0x3E35563E, 0x3E47F357, 0x3E69E7C3, 0x3E807FE3, 0x3E9C4CBE, 0x3EA9D44C, 0x3ED21C90, 0x3EE71F6A, 0x3F0A3680, 0x3F0D1A6F, 0x3F4AFB13, 0x3F75CC38, 0x3F7EDBBD, 0x3F8E893B, 0x3FB40673, 0x3FBE904F, 0x3FD49D3B, 0x3FDA00F3, 0x3FDCC8D7, 0x3FE33BD6, 0x3FE8C5A0, 0x40202867, 0x403CD434, 0x40520E70, 0x405ECA16, 0x4062FF73, 0x40638BDC, 0x4072CD06, 0x407C47FF, 0x408A9436, 0x408F7148, 0x40BB1149, 0x40C323AE, 0x40C4763F, 0x40C84A74, 0x40CF0783, 0x40DBF464, 0x40E25DB8, 0x410C61D1, 0x413539BC, 0x4136829A, 0x41702C8A, 0x4181752, 0x41924877, 0x41A0FB02, 0x41B0D022, 0x41E8912A, 0x42140FF9, 0x4221E435, 0x424C6E27, 0x4256C73, 0x4267DA87, 0x429AEAB3, 0x42B484ED, 0x42BD0780, 0x42BF09B3, 0x42CFE9C0, 0x4301E10C, 0x4315A7C5, 0x4316C9E7, 0x431AA036, 0x43220969, 0x43709044, 0x4377C10, 0x43996428, 0x43BB7E48, 0x43E92628, 0x44018EDB, 0x444180DB, 0x44473EFC, 0x44767B31, 0x4479B304, 0x447A9EB9, 0x44A58B0A, 0x44BFB619, 0x44E1680C, 0x45037B9B, 0x450AD03A, 0x451A2644, 0x45268B6F, 0x4538C4A2, 0x453C7CAB, 0x45472FD5, 0x454C7B67, 0x45514731, 0x4559460A, 0x455DDF5C, 0x455F1084, 0x457AE195, 0x459F2683, 0x45F3BDFB, 0x45F72495, 0x4609D596, 0x46617502, 0x4671AC2E, 0x4677C656, 0x46794EB2, 0x467F4CAA, 0x46826B53, 0x468668F0, 0x468CC978, 0x469A2B4A, 0x469A61CF, 0x46B0C696, 0x46B5A15C, 0x46CB3A49, 0x46E7E31D, 0x46F21343, 0x47017C90, 0x47187F7F, 0x47352E14, 0x47531446, 0x47547D4, 0x4763B2C6, 0x476B23A9, 0x4778CA0A, 0x47978D7F, 0x47B0C137, 0x47B3C35E, 0x47CAB814, 0x47D61C99, 0x47D98A2E, 0x47DB08A9, 0x4818ACD0, 0x482B28D0, 0x483C5C88, 0x486867E6, 0x486C1280, 0x489E27E7, 0x48CCC328, 0x48CEB6B4, 0x48F16186, 0x4908A514, 0x4926A3, 0x492C9E46, 0x4938C82F, 0x494A9E50, 0x4977AC28, 0x498849F3, 0x49949FDA, 0x49A11F0D, 0x49F977A9, 0x4A01B76A, 0x4A124267, 0x4A46E814, 0x4A4A40A4, 0x4A557117, 0x4A962D55, 0x4AAD0ECB, 0x4AC39C6C, 0x4ACF110C, 0x4AD23212, 0x4AF0ADF5, 0x4B22C5CB, 0x4B37333C, 0x4B4B9A13, 0x4B67D7EE, 0x4B770634, 0x4BB5605D, 0x4BBE5E2C, 0x4BD59750, 0x4C0E4031, 0x4C2C0D1F, 0x4C2C2B12, 0x4C2C6B6A, 0x4C39CF10, 0x4C4C10CF, 0x4C684C81, 0x4C71D143, 0x4C8F02B4, 0x4CB2AB4, 0x4CC674B5, 0x4CE9BAA7, 0x4D0449C6, 0x4D15FDB1, 0x4D1C15C2, 0x4D1EB0FB, 0x4D210467, 0x4D3C9A99, 0x4D4C37B3, 0x4D840FC4, 0x4D8A6521, 0x4DA3D51F, 0x4DAAD55B, 0x4DD03628, 0x4DEBC227, 0x4DFD5FEC, 0x4E03F632, 0x4E0A260B, 0x4E418E13, 0x4E53202A, 0x4E6D875B, 0x4E9CA30A, 0x4EA70FB4, 0x4EC0D983, 0x4EE74A3, 0x4F41DF6B, 0x4F44AF21, 0x4F4BB300, 0x4F4D76E8, 0x4F5546C, 0x4F5B781C, 0x4FA43BA4, 0x4FD3EE7, 0x4FD83F5B, 0x4FF3D3F5, 0x4FFEFE43, 0x500B6805, 0x500D9244, 0x5023F8F, 0x50296140, 0x5049A864, 0x504C4B22, 0x50507BED, 0x50779A2C, 0x507BC6F7, 0x509A286F, 0x50C39926, 0x50CDB295, 0x50EF8FC6, 0x50F89338, 0x511E6F50, 0x5130DB1E, 0x5133A750, 0x51367B34, 0x513D444B, 0x51523B8C, 0x515AF67C, 0x517B601B, 0x5187BED3, 0x51972B04, 0x51B2D848, 0x51E0064F, 0x51E7A037, 0x5205C6F5, 0x520FCB6D, 0x52559BB6, 0x52746FE1, 0x52873C6A, 0x5298F472, 0x52A1CA49, 0x52ACCB7B, 0x5303FC8, 0x531E4892, 0x532DDD2, 0x53B694B1, 0x53BB329, 0x53C9563C, 0x53DB6994, 0x53FC3FEC, 0x54058F5F, 0x54198922, 0x5476B9FD, 0x54856309, 0x54E75C7D, 0x54E775E0, 0x54E79E9C, 0x54E9EE75, 0x54EC103, 0x550665AE, 0x5518C0F, 0x55294368, 0x55461BE6, 0x554BA16E, 0x557EDA1D, 0x55A21772, 0x55CB21F9, 0x55E06443, 0x5604B890, 0x56253356, 0x56345F6B, 0x563B635D, 0x563E0D, 0x56485B56, 0x56568422, 0x5656D578, 0x56737A3C, 0x5690F6C3, 0x56A02502, 0x56C1E488, 0x56D5B144, 0x56E29A1E, 0x56E75FE4, 0x56F9ED27, 0x57218529, 0x572EB5E, 0x5736FB23, 0x574EE85C, 0x57506EA6, 0x575504DE, 0x5777EC77, 0x579B4510, 0x57B8D0D4, 0x57B8DA7C, 0x57E5B3F9, 0x57F9BC83, 0x584E9C59, 0x585E49B6, 0x58612465, 0x5888F58E, 0x58A80BD5, 0x58C0F6CF, 0x58D9775F, 0x59090745, 0x591EA833, 0x593143B9, 0x59352658, 0x59394583, 0x594E862C, 0x596B900D, 0x59910AB2, 0x59A3A17D, 0x59B5C2A2, 0x59C52BE6, 0x59C5FAD7, 0x59CC312D, 0x59DE73AC, 0x5A32D4B4, 0x5A36BC37, 0x5A45B11A, 0x5A59A24A, 0x5A5E3B67, 0x5AA379D9, 0x5AB26C2B, 0x5AB94128, 0x5AC6DAC9, 0x5AC9F04D, 0x5AE68AE6, 0x5AEE2FC1, 0x5AFCD8A1, 0x5B1B70AA, 0x5B1E995D, 0x5B2A67A8, 0x5B39D0AC, 0x5B6A607E, 0x5B7463F4, 0x5BBCC934, 0x5BC276AE, 0x5BD8D82D, 0x5BE529F7, 0x5C05B7E1, 0x5C065D55, 0x5C0AB2A9, 0x5C350D78, 0x5C57B85D, 0x5C645F64, 0x5C95B670, 0x5C9F477C, 0x5CA74040, 0x5CD7C3C0, 0x5CE60A11, 0x5D0FE25B, 0x5D209F25, 0x5D2FC042, 0x5D382498, 0x5D3BFFC9, 0x5D66CE1E, 0x5D73CD20, 0x5DCD0796, 0x5DE98F0A, 0x5E1020CC, 0x5E219B67, 0x5E557307, 0x5E832444, 0x5E854D47, 0x5E8A7559, 0x5E93FBFA, 0x5EB00A6A, 0x5ECF955D, 0x5ED1EECC, 0x5EF9C5C2, 0x5F29A7E0, 0x5F3DDEC0, 0x5F7789E6, 0x5F86AA39, 0x5FDC1047, 0x5FEE98A2, 0x60118951, 0x6025AA2F, 0x603FA104, 0x6052E62E, 0x6087C10C, 0x608F7D39, 0x60AA4AA1, 0x60B345DE, 0x60C23785, 0x60DE1B76, 0x60E1FEDF, 0x60E29B78, 0x60F72371, 0x611E0BE2, 0x6158959E, 0x616D5040, 0x617DC75D, 0x61ECC465, 0x62073DF7, 0x621388FF, 0x625181DC, 0x6253B9D7, 0x625C7B66, 0x62619061, 0x627A559B, 0x628F489B, 0x62A3161D, 0x62B43677, 0x62BABF2C, 0x62C19A3D, 0x62D026BE, 0x62F02485, 0x630101F, 0x630CD8EE, 0x633F8C48, 0x6345EC80, 0x6346B7CC, 0x6349065, 0x6396058, 0x63A89684, 0x63B02FAD, 0x63DC4A5, 0x63F093A6, 0x64235620, 0x642DA5AA, 0x6435F67F, 0x644141C5, 0x64646F1D, 0x648E685A, 0x64BA4648, 0x64D91CED, 0x64DDB07D, 0x65213FC3, 0x65255524, 0x654F0287, 0x6574041D, 0x65B705F6, 0x65B92B3, 0x65C597B, 0x65D84665, 0x65DDE8AF, 0x65E1D404, 0x6602CED6, 0x660C468E, 0x6641A864, 0x66571CA0, 0x667046A8, 0x6674818, 0x66C3C59C, 0x66DA9935, 0x66DCD9D2, 0x66EC713F, 0x66FA450C, 0x66FEB701, 0x672EFB45, 0x6739AD55, 0x67522E25, 0x67649EE0, 0x6776720A, 0x67785AF2, 0x679CE71, 0x67B23E17, 0x67BA6F5, 0x67E73525, 0x67E74842, 0x682CB7E1, 0x686672DD, 0x688DE64, 0x68A054E, 0x68BA0730, 0x68BB439F, 0x68BD42A9, 0x68C9AF69, 0x68CDFA60, 0x6909BA59, 0x6926AB03, 0x69956127, 0x6A036061, 0x6A0BEA60, 0x6A3F747D, 0x6A79782A, 0x6AA6A1CC, 0x6AE36192, 0x6AEFE6A5, 0x6B0E9D57, 0x6B125A02, 0x6B34A160, 0x6B4335DD, 0x6B83ABDF, 0x6B90E730, 0x6B97075B, 0x6BB5CDA, 0x6BB93227, 0x6BBDE6CD, 0x6BDE5CE4, 0x6BE3ACA8, 0x6BE5DF29, 0x6BF6E296, 0x6C344AE3, 0x6C47A6F, 0x6C5738AB, 0x6C67131A, 0x6C73E45A, 0x6CC062FC, 0x6CD58238, 0x6CDAA7D2, 0x6CE3692, 0x6D55B3B3, 0x6D58F73B, 0x6D88BCD3, 0x6E660D3F, 0x6E67FD35, 0x6E7FDA1C, 0x6E96A1EE, 0x6EAF56DE, 0x6EFC2FD0, 0x6F009E33, 0x6F1A1901, 0x6F1C592C, 0x6F463F56, 0x6F5913A4, 0x6F5D215F, 0x6F8350CE, 0x6F9BA2, 0x6FF034BB, 0x7017257D, 0x7018BE31, 0x70559AC7, 0x70689638, 0x709B4BCB, 0x70A2845C, 0x70AA5B7D, 0x70DD5E25, 0x70ED476A, 0x70F6D3AD, 0x71077FBD, 0x710E5D1E, 0x7150720, 0x7154B6FD, 0x71570DBA, 0x7158B1EA, 0x716777CB, 0x717B87D9, 0x7186AD9, 0x718D461F, 0x71A5C5DB, 0x71CDD52F, 0x71D0CF3E, 0x71D898EF, 0x71E9C63E, 0x72052DB3, 0x721B2492, 0x721B763B, 0x72344191, 0x72429998, 0x7253D5B2, 0x725C6174, 0x7262B5BA, 0x726FAE66, 0x728D3D53, 0x72B36815, 0x72BA8A14, 0x72CF2514, 0x72E8CD3A, 0x72FA5EF2, 0x734CFEDA, 0x73722CD9, 0x73C6F979, 0x73E96210, 0x742075FE, 0x744A9EA5, 0x744AC008, 0x749909AC, 0x749B282E, 0x749DEEA2, 0x74A0F291, 0x74C16879, 0x74D42C03, 0x74D6B13C, 0x74E8C53E, 0x74E8FAD9, 0x74EB662D, 0x74EE2D8B, 0x74EF9C40, 0x751908A, 0x7524E27B, 0x75324674, 0x755A2B3E, 0x75885CB3, 0x758C5E2E, 0x7591E516, 0x759E0EC9, 0x75B06B5A, 0x75FC6C3C, 0x761F8F48, 0x762E5C5F, 0x766A74FE, 0x76751DD4, 0x767DED29, 0x7685B333, 0x768CBB35, 0x769E5CF2, 0x76A9FEB6, 0x76AFFBB5, 0x76C641E4, 0x76DAC96C, 0x76FB0F21, 0x771FE190, 0x7722F545, 0x772DA539, 0x77340650, 0x7762249C, 0x7771AB83, 0x779A60E2, 0x779F6E40, 0x77B8EF01, 0x77BB7CB8, 0x77CBA290, 0x781C7E80, 0x78350773, 0x78436D07, 0x784D550B, 0x786CA0A2, 0x789D8C6C, 0x78C4DCBE, 0x79472AE3, 0x79543043, 0x7963FA4D, 0x796DE696, 0x79716890, 0x798D6C27, 0x79A6CAF6, 0x79B067AF, 0x79B43255, 0x79CA237B, 0x7A18BB9C, 0x7A299C13, 0x7A569F78, 0x7A6B0EF8, 0x7A72A24E, 0x7AA36406, 0x7AAF22C, 0x7AB77B57, 0x7ABB89D2, 0x7AD67C95, 0x7AF0133D, 0x7AF85862, 0x7B0040A8, 0x7B2A0337, 0x7B44D659, 0x7B48E696, 0x7B4C3E6F, 0x7B689E20, 0x7B72AFD1, 0x7B786555, 0x7B93CDAA, 0x7BBEA8CF, 0x7BCD8991, 0x7BD26837, 0x7BED1872, 0x7BF61471, 0x7BFFE82F, 0x7C43D32A, 0x7C496803, 0x7C6339DF, 0x7C6F7668, 0x7C8D6464, 0x7C92F21, 0x7CC8057D, 0x7CCC49AF, 0x7CE2EA4, 0x7CF0971D, 0x7D0DE7EA, 0x7D1A0616, 0x7D3007A2, 0x7D4FD28C, 0x7D58ED7E, 0x7D593B4C, 0x7D65EB6E, 0x7D876DC0, 0x7D90EEE5, 0x7D927E1B, 0x7D95AFFF, 0x7DA12905, 0x7DB578DD, 0x7DBC0764, 0x7DBCEF6F, 0x7DC6D022, 0x7E24BD6E, 0x7E3AA40A, 0x7E3BFBC5, 0x7E946E87, 0x7E97C92C, 0x7EF353E1, 0x7EFBA039, 0x7F349900, 0x7F3F1C02, 0x7F70C15A, 0x7F8AE259, 0x7F93799B, 0x7F9B9052, 0x7FADB4B9, 0x7FB6FB2A, 0x7FF553F, 0x80151CCF, 0x801D0D86, 0x80275EE, 0x8029970, 0x802A21B4, 0x80340396, 0x804F444C, 0x805BAB08, 0x807B3450, 0x808D4CC, 0x80DB77A7, 0x80E3DA55, 0x810158F8, 0x81043F00, 0x811373DE, 0x81216EE0, 0x812CBE0E, 0x814A28F4, 0x814D0752, 0x815CAE99, 0x8174B90, 0x8179C48A, 0x81802053, 0x818534AC, 0x8191BC1A, 0x819CD954, 0x81BD8D3B, 0x81DAC12, 0x82146BE9, 0x8218944E, 0x8243B79, 0x8251485D, 0x825423C2, 0x8262C70E, 0x827F14DE, 0x829A799, 0x82BA6F2, 0x82D32D07, 0x82E548CC, 0x82EEAF0F, 0x8306C256, 0x832DEB7A, 0x8332730C, 0x8338DA1D, 0x837F8581, 0x8386AE28, 0x838F7BF7, 0x83A9811D, 0x83B608A0, 0x83B69B, 0x83BAE814, 0x83C846A0, 0x83ED8E08, 0x840D24D3, 0x84315226, 0x8474E6F0, 0x847F1304, 0x84ADF9EB, 0x84BDD475, 0x84F05943, 0x8501E727, 0x850690FF, 0x851687F9, 0x8543AAC8, 0x85488C49, 0x8570DD34, 0x85725848, 0x858678C, 0x85BA15A4, 0x866004A8, 0x866D1B67, 0x866DEF1A, 0x8687E285, 0x86DAE6D6, 0x86DC03F9, 0x86E80A17, 0x87125F5D, 0x8727A4C5, 0x877C0E1C, 0x87871CE0, 0x87A0C174, 0x87A42A12, 0x87B92190, 0x87C5D271, 0x87D1E6BD, 0x881B1FDB, 0x88203DDA, 0x88236E22, 0x882D3EB3, 0x883DAB2D, 0x885724DE, 0x8866D9D0, 0x8876C872, 0x88AE9667, 0x88B13CDC, 0x88B9B909, 0x88EAF398, 0x88F0F7E7, 0x893A342C, 0x894314A4, 0x89459F0A, 0x8957038E, 0x895E1D67, 0x896CDF8D, 0x897A510F, 0x899933C8, 0x89D5921, 0x89DB0EC7, 0x89EEE07B, 0x8A023024, 0x8A04E1FE, 0x8A292AA3, 0x8A3A3116, 0x8A559D26, 0x8A68388F, 0x8A6BBDEA, 0x8AB4890B, 0x8AC9EA19, 0x8AD670EC, 0x8AFC488D, 0x8AFE3D90, 0x8B2DE971, 0x8B4D1C06, 0x8B5E3E3D, 0x8B755993, 0x8B99B72B, 0x8BAAC437, 0x8BBF2950, 0x8BD5F11E, 0x8BE3D47F, 0x8BF60FC3, 0x8C227332, 0x8C4B63E2, 0x8C555ADD, 0x8C6E611D, 0x8C90D22F, 0x8C913A91, 0x8CB53C9F, 0x8CD3E487, 0x8CD58F9, 0x8CDB0C09, 0x8CE63FA1, 0x8CEBA60D, 0x8D014B23, 0x8D15BE5D, 0x8D27280E, 0x8D2D89C4, 0x8D5C7B37, 0x8D7E3A7D, 0x8D9A1734, 0x8D9FD4D1, 0x8DA93C3D, 0x8DC53629, 0x8DCFE77D, 0x8DD9AA0C, 0x8DDD0B5B, 0x8DE5382F, 0x8DE82C15, 0x8E101F5C, 0x8E1D8F78, 0x8E2C7FD5, 0x8E319AB8, 0x8E5D4EAB, 0x8E664EFD, 0x8E7AEEB7, 0x8E952B12, 0x8EACBD13, 0x8EAF9CF6, 0x8EB83D2, 0x8EC68304, 0x8F266745, 0x8F291C4A, 0x8F3137E6, 0x8F320DE4, 0x8F3F3A9C, 0x8F45D327, 0x8F4BC32, 0x8F60366E, 0x8F6754AE, 0x8F7AF78, 0x8F7D9F46, 0x8FA6EE0E, 0x8FB923EC, 0x8FDDB5DB, 0x900C878C, 0x902656EB, 0x903F5EE4, 0x90700C7D, 0x907A6BF, 0x908A335E, 0x909A1D76, 0x90C74343, 0x90D6EE57, 0x90DF7A4C, 0x913FD7D6, 0x91534C6E, 0x9156EFC0, 0x9194DB71, 0x91A081A1, 0x91A7FCEB, 0x91C80401, 0x9207E4DE, 0x920C2517, 0x9226734D, 0x92268BB5, 0x92302899, 0x92452C0E, 0x9254249D, 0x92593632, 0x9262744C, 0x926B8734, 0x929801C6, 0x92B35BE6, 0x92DAFA78, 0x92E7E4EB, 0x92FDBAE6, 0x93045157, 0x930B3AE5, 0x9320E642, 0x932FDB81, 0x9337863, 0x934BE749, 0x935A95DA, 0x93628786, 0x9365E042, 0x9374523F, 0x939218AB, 0x939243FB, 0x93A44A1F, 0x93C665FA, 0x93D23399, 0x94119534, 0x9413EB54, 0x942160EC, 0x943A58EB, 0x943A6CFC, 0x9451EFE7, 0x9462665, 0x94850968, 0x9497F31, 0x949FE53E, 0x94AB35A9, 0x94AF848F, 0x94B75EF, 0x94B82066, 0x94BCAC7C, 0x94BF0D35, 0x94C834AD, 0x95050CAD, 0x9559BB38, 0x9567392B, 0x959E43A3, 0x95A9AB2B, 0x95A9ACCB, 0x95BB67EB, 0x95C4B5AD, 0x95D3BD8, 0x95D5EBD, 0x95DB71, 0x95F1C60D, 0x95FFACF8, 0x96100EA4, 0x96525B06, 0x965EA007, 0x966934, 0x966C90FD, 0x9678D4FF, 0x96863460, 0x968E5770, 0x96A07066, 0x96A8E05F, 0x96B2FD08, 0x96B8BEE8, 0x96C0277B, 0x96C26F66, 0x96C4C4DD, 0x96E28FE2, 0x96E7AD87, 0x97269DC8, 0x97287D68, 0x97353375, 0x9773F36A, 0x97852A82, 0x97886238, 0x980D45D7, 0x9854485F, 0x98713C68, 0x9879AC51, 0x98AA48E5, 0x98BDB311, 0x98C9138B, 0x98D244, 0x98E29ED0, 0x98EFB921, 0x99968B37, 0x99CDE331, 0x99CF02C4, 0x99F58A07, 0x99FCC86, 0x9A01FFDA, 0x9A025503, 0x9A0840FD, 0x9A0E3BFE, 0x9A176B6E, 0x9A2180FF, 0x9A5C1D56, 0x9A703A2B, 0x9AA2BA3F, 0x9AB49E, 0x9ACC6446, 0x9B29D99B, 0x9B38374A, 0x9B431236, 0x9B581DE7, 0x9B76F7E6, 0x9B8631EB, 0x9B9AFFF1, 0x9BABCBA4, 0x9BDC0B49, 0x9BE7C860, 0x9BE9C691, 0x9BEC3401, 0x9BF33E41, 0x9C106AD9, 0x9C59FC06, 0x9C720B61, 0x9C84BDA0, 0x9C8F830D, 0x9CBA682A, 0x9CBC4B0, 0x9CD18314, 0x9CD6A451, 0x9CEA7458, 0x9CF1CE5, 0x9D2C94FA, 0x9D2D778D, 0x9D4934F4, 0x9D5D9B38, 0x9D84554C, 0x9DB5D391, 0x9DB63CFF, 0x9DF75B2A, 0x9DFD89E6, 0x9E2B9522, 0x9E553002, 0x9E741875, 0x9E8D8B72, 0x9ECF722A, 0x9EF0A9CF, 0x9EF0BC64, 0x9EFBD5D1, 0x9F3D577F, 0x9F470BE3, 0x9F4AF763, 0x9F80F6DF, 0x9F82917F, 0x9F98FA5C, 0x9FA4AF99, 0x9FE8FD5E, 0x9FEEAA9C, 0xA003C40B, 0xA0134498, 0xA01E0E66, 0xA03E42DF, 0xA0466A69, 0xA063CABD, 0xA0777943, 0xA07BAEB9, 0xA07C5B7D, 0xA08B46AD, 0xA0CE89C8, 0xA0D8C749, 0xA0DA6B1D, 0xA0FDCB82, 0xA1008E0E, 0xA100CC97, 0xA13045D4, 0xA14CC95D, 0xA16626C7, 0xA17F9AB0, 0xA19708E3, 0xA19A238D, 0xA1A1402E, 0xA1CB6C94, 0xA1D7FABE, 0xA25CCB8C, 0xA25D767E, 0xA27B9FE8, 0xA27F4472, 0xA286DE96, 0xA286F015, 0xA2A5C9FE, 0xA2C5BD9D, 0xA2CAAB4F, 0xA2E5F921, 0xA2FA2C17, 0xA3407CA3, 0xA3707DFC, 0xA3BD9E94, 0xA3CDF152, 0xA3DAC790, 0xA3E4798E, 0xA3EFE4A1, 0xA4098ACC, 0xA41BC13D, 0xA4302183, 0xA4524B23, 0xA4A75FCF, 0xA4D1B30E, 0xA4E69134, 0xA4EF02F3, 0xA520B982, 0xA5456DBB, 0xA565E27E, 0xA58BBF4F, 0xA5A0C695, 0xA5B55421, 0xA61FF9AC, 0xA639DCA2, 0xA6459CAA, 0xA657DD2, 0xA69AE16C, 0xA6C68693, 0xA6D8B798, 0xA6D8D7A5, 0xA6E73135, 0xA6F02670, 0xA6F2C057, 0xA706E84D, 0xA71A1D2A, 0xA739012A, 0xA78571CA, 0xA796D7A7, 0xA79BC686, 0xA79BE783, 0xA79E5B05, 0xA7B621F2, 0xA7C8594B, 0xA7DF64D7, 0xA7E36020, 0xA7E936FD, 0xA7F3F82B, 0xA7FA70AE, 0xA812B6CB, 0xA8171E9E, 0xA819680B, 0xA850DDE1, 0xA85397A2, 0xA8546914, 0xA877FF5E, 0xA89336C, 0xA89A53F2, 0xA89F4DA7, 0xA8A21766, 0xA9021211, 0xA92C1AF4, 0xA9419B6D, 0xA95299B9, 0xA97C2059, 0xA97C2F6C, 0xA993915F, 0xA9CCEF66, 0xA9DC8558, 0xAA10752D, 0xAA2A0EAF, 0xAA2B89E0, 0xAA318785, 0xAA39FD6C, 0xAA4AE00C, 0xAA7EA3BD, 0xAA8BD440, 0xAB07CBBE, 0xAB0E79EB, 0xAB0F06BE, 0xAB3346B5, 0xAB415C07, 0xAB55D8F3, 0xAB5B7C18, 0xAB6BD72F, 0xAB969F00, 0xABBDD5C6, 0xABBE1E45, 0xABC99E21, 0xABED6020, 0xAC2C7C63, 0xACAB8FF3, 0xACADF916, 0xACF162E0, 0xACFEB3F9, 0xAD334B40, 0xAD3E05F2, 0xAD40AD55, 0xAD43306, 0xAD8383FA, 0xADB2511A, 0xADBBA287, 0xADF81D24, 0xADF8F882, 0xAE040377, 0xAE396263, 0xAE446344, 0xAE4E17, 0xAE548FA8, 0xAE63B1C2, 0xAEB29F98, 0xAEC0D176, 0xAEC9163B, 0xAED95A6F, 0xAEF9611C, 0xAF016CC1, 0xAF3C081B, 0xAF769B81, 0xAF7AFCC4, 0xAF83036, 0xAF8CB3DF, 0xAFA1148B, 0xAFA914EF, 0xAFEC26A4, 0xAFFEA720, 0xB0127EA7, 0xB01A5434, 0xB0313590, 0xB03BCCDF, 0xB0523B0, 0xB06CCD38, 0xB1808F56, 0xB1817BAA, 0xB19215F6, 0xB19B2764, 0xB1A52EF7, 0xB1FF7137, 0xB200CE2, 0xB21288FA, 0xB23F46E6, 0xB2410EAB, 0xB241806C, 0xB245FC10, 0xB262DE67, 0xB26FED2B, 0xB2B2BBAA, 0xB2E83B75, 0xB3200F72, 0xB37384BC, 0xB3A2CC4F, 0xB3BBD241, 0xB3D9A67F, 0xB3EB01ED, 0xB4087F7, 0xB41064A4, 0xB4668B23, 0xB4737F03, 0xB48C0C04, 0xB4A9A558, 0xB4F44C6E, 0xB5087ACF, 0xB52BA5F5, 0xB52F40EE, 0xB58B8FF3, 0xB59B530D, 0xB59D74CA, 0xB5ABC4B4, 0xB5AD044E, 0xB5BF87B2, 0xB5C5C99B, 0xB5CC548B, 0xB60D2BA, 0xB621E7E4, 0xB6507AD9, 0xB66B0C9A, 0xB6BE07E0, 0xB6DF3709, 0xB70D7C6D, 0xB710A51, 0xB72F086D, 0xB731DF54, 0xB739F53, 0xB73A1486, 0xB74C3BD7, 0xB7CD0A49, 0xB7E0F0A, 0xB8209F16, 0xB8515B2F, 0xB8B3A5D0, 0xB9137BA7, 0xB9392CE7, 0xB96C7ABE, 0xB97A966B, 0xB986FF47, 0xB9A3512, 0xB9FB142F, 0xBA672146, 0xBA699DDF, 0xBA6C085B, 0xBA8128EC, 0xBA9AD458, 0xBAE491C7, 0xBAEC6ADD, 0xBAF17315, 0xBAF52DD8, 0xBAF7BFBE, 0xBB120CFC, 0xBB1A1294, 0xBB293400, 0xBB2D33D3, 0xBB4E2F66, 0xBB54AA3D, 0xBB54ECCA, 0xBB619744, 0xBB62AAC5, 0xBB6321BD, 0xBB7CCE49, 0xBB7E6991, 0xBBA8D34D, 0xBBAEEF94, 0xBBB6DF61, 0xBBE6ACC9, 0xBBFC9050, 0xBC4AA502, 0xBC54371B, 0xBC5A9C58, 0xBC649C49, 0xBC7BD5CB, 0xBD085DCA, 0xBD0A67FB, 0xBD0D4831, 0xBD11A9D2, 0xBD4236F6, 0xBD64F1B7, 0xBDA90BAC, 0xBDBB5948, 0xBDC8F63E, 0xBDD9FA57, 0xBDF45B, 0xBE6A30C3, 0xBE70849B, 0xBE7ACD89, 0xBE81F1E2, 0xBE92551F, 0xBE998184, 0xBEB7281A, 0xBEB98840, 0xBEBBFDC8, 0xBEDC4503, 0xBEE23713, 0xBF0F4B2, 0xBF21818E, 0xBF25E7B2, 0xBF55025D, 0xBF6993C7, 0xBF7F9035, 0xBF855650, 0xBF85AE77, 0xBFAA349B, 0xBFFE8B5C, 0xC0157255, 0xC0332A6, 0xC06B763D, 0xC07C64C9, 0xC0823820, 0xC08FE5F6, 0xC0B00C20, 0xC0B971EA, 0xC0E23671, 0xC0E3AA47, 0xC0E83320, 0xC0F1BC91, 0xC1224AA7, 0xC12AC47A, 0xC1487110, 0xC174C71B, 0xC195803B, 0xC1A11435, 0xC1AD5DDF, 0xC1AFABD5, 0xC1CD89B9, 0xC20A7D2B, 0xC2169164, 0xC21C8A56, 0xC249D62D, 0xC2703B88, 0xC273BB4D, 0xC306A9A3, 0xC307D531, 0xC3169BDA, 0xC317717F, 0xC33ED360, 0xC380AC85, 0xC38E9DB0, 0xC3A12135, 0xC3AA2EC7, 0xC3C10FCC, 0xC3DCBEDB, 0xC40192B5, 0xC4110917, 0xC41DDA62, 0xC44762A1, 0xC44C2F44, 0xC46F74AC, 0xC47352E7, 0xC4736ED3, 0xC47AB1B0, 0xC47F5B91, 0xC49343BB, 0xC4AEAF49, 0xC4CD35AF, 0xC4CD928D, 0xC4D71AB4, 0xC4F63A89, 0xC515E735, 0xC51BC42F, 0xC5223796, 0xC53576CA, 0xC560D7C0, 0xC575F0BC, 0xC58250F1, 0xC589CD7D, 0xC59D4268, 0xC5D8B1E9, 0xC5E08B66, 0xC5E0C989, 0xC5EB849A, 0xC62406A6, 0xC62E77B3, 0xC6517D52, 0xC65586A9, 0xC6609191, 0xC670C814, 0xC67D5CF6, 0xC69CF43D, 0xC6B6CCC1, 0xC6CC812C, 0xC6D53AA0, 0xC6EA802E, 0xC6F36292, 0xC70E6CFA, 0xC71E607B, 0xC736999E, 0xC74F9AF, 0xC765633A, 0xC7A3D279, 0xC7BD1AF0, 0xC7DE5C30, 0xC80A5DDF, 0xC84BE309, 0xC85C4487, 0xC871E745, 0xC8865DF, 0xC8A4BF12, 0xC8B514E2, 0xC8BAB2F2, 0xC8CC9E75, 0xC901AA9F, 0xC90B2DDC, 0xC92719A7, 0xC937FF3D, 0xC9458688, 0xC960E161, 0xC96456BA, 0xC969F2D0, 0xC977D6E2, 0xC9780B95, 0xC98160E1, 0xC9C13D8D, 0xC9D098B3, 0xC9DDA85B, 0xC9EF81ED, 0xC9F6F0BC, 0xC9FA6E07, 0xCA1167F, 0xCA160BCC, 0xCA23FD25, 0xCA52CF43, 0xCA7A0A49, 0xCA95C487, 0xCAB087F0, 0xCAB21090, 0xCABD136A, 0xCAECF37E, 0xCAFE5FE0, 0xCAFE9209, 0xCAFEE798, 0xCB074B9D, 0xCB1CD6D3, 0xCB6A351E, 0xCB6C4ED, 0xCB75BD9C, 0xCB7C8994, 0xCBA7242F, 0xCBA99F4A, 0xCBAF2EF, 0xCBB5F9B6, 0xCBC7D3C8, 0xCBD98BA1, 0xCBDB7739, 0xCBE09AEC, 0xCBE7068F, 0xCBEC9369, 0xCC068380, 0xCC1D8F66, 0xCC2356E3, 0xCC3CF97D, 0xCC7DCE24, 0xCC91FCF5, 0xCC95C96B, 0xCC9D7F1A, 0xCCA9C022, 0xCCB41A55, 0xCCBF0334, 0xCCD525E1, 0xCCD8C02D, 0xCCD937E7, 0xCCDC33CC, 0xCD31C872, 0xCD4D9DD5, 0xCD69BEA1, 0xCD71F11B, 0xCD83C393, 0xCDC9D654, 0xCDEBCCE7, 0xCE36E3FE, 0xCE4A3D20, 0xCE569932, 0xCE5D53E4, 0xCE67162C, 0xCE6B62B5, 0xCE70F183, 0xCE7A2411, 0xCE7CB520, 0xCE7D50A8, 0xCE8B8748, 0xCEA55F4C, 0xCEAE5AFC, 0xCEE79711, 0xCEEAD94B, 0xCF14D7F2, 0xCF2E3E24, 0xCF358946, 0xCFCDC518, 0xCFEA19A9, 0xD003E648, 0xD0567D41, 0xD064D4DC, 0xD094F11A, 0xD0D8BDBC, 0xD0F51299, 0xD10E761A, 0xD12A643A, 0xD12E5B5D, 0xD14D9C07, 0xD15C4B1C, 0xD19B312C, 0xD1B71A25, 0xD1BAAFB7, 0xD1C3D71B, 0xD1ED1D48, 0xD1EEBC45, 0xD2157428, 0xD2161E77, 0xD21639A8, 0xD217EE7E, 0xD24B4D0C, 0xD265B049, 0xD268255C, 0xD2688412, 0xD26CCA46, 0xD2858D8A, 0xD2B7A5A0, 0xD2B8ACBD, 0xD2C80B2E, 0xD315978E, 0xD32FA11F, 0xD33AFF79, 0xD34A6CBA, 0xD35DD93, 0xD368BA15, 0xD3850671, 0xD3BBE42F, 0xD3BF3ABD, 0xD3C08183, 0xD3F40140, 0xD41C9AED, 0xD41DF479, 0xD42A41C2, 0xD437615C, 0xD439C692, 0xD43BB56D, 0xD447439D, 0xD4AE8CB, 0xD4C73595, 0xD4DA14EF, 0xD4F5D07D, 0xD4F845D, 0xD50DF46C, 0xD56C3D52, 0xD5774FB7, 0xD57A5125, 0xD59A822B, 0xD5F1EEE1, 0xD63FCB3E, 0xD6460EA2, 0xD649B7E1, 0xD656E7E5, 0xD6685803, 0xD6844637, 0xD6A3B458, 0xD6CC4766, 0xD6E3D5EA, 0xD70ECC80, 0xD732CD6, 0xD75CDD75, 0xD760CAD5, 0xD7624E6B, 0xD79803B5, 0xD79D5D1B, 0xD7E5CF9, 0xD7EC8760, 0xD7F934F4, 0xD820ADD4, 0xD830DC7, 0xD87AF337, 0xD87CC710, 0xD87F3A9E, 0xD8B90941, 0xD8CC7221, 0xD8D77733, 0xD8E31B1A, 0xD8FEC4F8, 0xD8FF798A, 0xD906A3A9, 0xD938DEE0, 0xD9622D64, 0xD9653728, 0xD9660339, 0xD96860FC, 0xD98F656A, 0xD9969E4, 0xD99E275B, 0xD99EC000, 0xDA02F415, 0xDA0AF00E, 0xDA7951A2, 0xDA931D65, 0xDAB4BAC0, 0xDAC523BC, 0xDAE2A2BE, 0xDB18FA01, 0xDB67785D, 0xDB718B21, 0xDB75CDD1, 0xDB7AECDA, 0xDB8B5D71, 0xDBA768A1, 0xDBB2FA7, 0xDBB83E2B, 0xDBBCA06, 0xDBCE51E0, 0xDBD88708, 0xDCBA251B, 0xDCC0B8B, 0xDCE05406, 0xDD4A3F1F, 0xDD524A11, 0xDD5D08A7, 0xDD616893, 0xDD7936F5, 0xDD8878E9, 0xDDD1F1F3, 0xDDDE59B5, 0xDE10BA1F, 0xDE40C28, 0xDE7442EE, 0xDE7D398C, 0xDE8BA3CD, 0xDEB3F5A, 0xDEB491C8, 0xDED82A6E, 0xDF084A6B, 0xDF38165E, 0xDF45B2A7, 0xDF552973, 0xDF594D8D, 0xDF83DB47, 0xDF99925C, 0xDFA36277, 0xDFC25D66, 0xE0047BFD, 0xE010F081, 0xE0160504, 0xE05E7052, 0xE08C834D, 0xE0C28DB5, 0xE0C9307E, 0xE0E2640B, 0xE0EBB49C, 0xE0F0684F, 0xE0FC6A32, 0xE103475, 0xE13C1F7F, 0xE190E45A, 0xE1A0B2F1, 0xE1BC7485, 0xE1F86C6A, 0xE202879D, 0xE206C450, 0xE2089749, 0xE20F2D, 0xE21069D, 0xE22445DA, 0xE224A6A5, 0xE23416C1, 0xE243B2AF, 0xE29EE145, 0xE2FF06DB, 0xE30A64DC, 0xE319F90B, 0xE3247582, 0xE3261B35, 0xE3802533, 0xE387BFE, 0xE3880F5A, 0xE38A3AD4, 0xE3938B0B, 0xE39DAF36, 0xE3BD00F9, 0xE3DB81AC, 0xE3F0D62D, 0xE40A0F1A, 0xE41E45C, 0xE4302123, 0xE4547765, 0xE4B3726A, 0xE4ECAC22, 0xE4EF6514, 0xE4FD20D8, 0xE4FF7103, 0xE51B4C5A, 0xE5219410, 0xE5612C1A, 0xE57202A1, 0xE5961511, 0xE5DCD62F, 0xE5E8E5C, 0xE61110A2, 0xE642F2FD, 0xE645E162, 0xE64F97A0, 0xE6633DCF, 0xE66A0B40, 0xE67446E9, 0xE68E14AF, 0xE69E8D0D, 0xE6AAA0D5, 0xE6B033BF, 0xE6EEF8AF, 0xE70D1F43, 0xE74E85CE, 0xE76A2353, 0xE77199F7, 0xE778B2A7, 0xE792C4A5, 0xE797A4B6, 0xE7E1E32B, 0xE7E3C98B, 0xE80F8ABE, 0xE812925D, 0xE81649C0, 0xE81FAC68, 0xE8422AC4, 0xE84A127A, 0xE87CBE4C, 0xE8C0C629, 0xE8C8E535, 0xE8D3A910, 0xE8D56DA2, 0xE8E59820, 0xE8EF929, 0xE8F538B5, 0xE9183D3A, 0xE92DC, 0xE933B34A, 0xE943B09C, 0xE9529CC, 0xE96CFE7D, 0xE972CACF, 0xE97A4F5E, 0xE9AE494F, 0xE9DAF877, 0xE9F2B68F, 0xEA01BD4A, 0xEA127CBC, 0xEA2188C, 0xEA235081, 0xEA5176C0, 0xEAA51103, 0xEAB6417C, 0xEAF04923, 0xEAF291A0, 0xEB0D3C87, 0xEB2D93B3, 0xEB382B7, 0xEB4CBA74, 0xEB69FB0C, 0xEB7D7C27, 0xEB864288, 0xEBA596CC, 0xEBB003F, 0xEBC225C1, 0xEBE420A4, 0xEBFCFF1A, 0xEC2AAF06, 0xEC2E5304, 0xEC5D0317, 0xEC62629, 0xEC651BC0, 0xECA8ACB9, 0xECD12E60, 0xECD470F0, 0xECE58AE0, 0xECE81278, 0xECE8365D, 0xED130FA1, 0xED159AE6, 0xED23C8A3, 0xED4A272F, 0xED7000C8, 0xED84792, 0xED88FC61, 0xEDA68956, 0xEDC31475, 0xEDD01937, 0xEE292B91, 0xEE4B1219, 0xEEBDFE55, 0xEEDE7FAB, 0xEEFC8A55, 0xEF05F807, 0xEF0B78E6, 0xEF8C3959, 0xEF9142DB, 0xEFAF4BA6, 0xEFB078AA, 0xEFCF554A, 0xEFD2564A, 0xEFD58EB9, 0xF01E2AAB, 0xF0211AC1, 0xF02E92D7, 0xF03895A4, 0xF07D8CEF, 0xF09157B0, 0xF0BD420D, 0xF0E59BC1, 0xF0E5C41D, 0xF0E94FF, 0xF11414C4, 0xF11D01F, 0xF11F956F, 0xF11FC458, 0xF139681B, 0xF178390B, 0xF1B8817A, 0xF1D464E5, 0xF1EDB7F4, 0xF1F5DCF0, 0xF210BE69, 0xF24777CA, 0xF258ADA1, 0xF26E339C, 0xF29C0B36, 0xF2A65A4C, 0xF2CDD6A8, 0xF2DB6A82, 0xF2FDF2E0, 0xF30658D2, 0xF30C566F, 0xF30E5814, 0xF31973BB, 0xF3538041, 0xF3768F90, 0xF379DCE4, 0xF3876894, 0xF3A3AB08, 0xF3A6309E, 0xF3A7293F, 0xF3B148A6, 0xF3B7EFBF, 0xF3C01350, 0xF3C2875A, 0xF3F1D953, 0xF4287778, 0xF42C43C7, 0xF440C04D, 0xF4418611, 0xF46B4DC8, 0xF478EFCF, 0xF486429, 0xF48F3051, 0xF4A1A14A, 0xF4C211F6, 0xF4D27EBE, 0xF4F13B06, 0xF4F3C796, 0xF50BC67A, 0xF557BAF9, 0xF57066DA, 0xF58FDEB4, 0xF592AD10, 0xF5CD2AA4, 0xF5E3401C, 0xF5F4BD95, 0xF5F9B71E, 0xF6015178, 0xF60986FC, 0xF62B3C48, 0xF633805A, 0xF637166E, 0xF63A13EC, 0xF6422F9A, 0xF64DF4CF, 0xF65F0F4F, 0xF66E5CDD, 0xF69B729C, 0xF6AA0E04, 0xF6B837F0, 0xF6E7E92B, 0xF7134E73, 0xF736227C, 0xF79A97F5, 0xF79FFF3C, 0xF7A0F00F, 0xF7C6792D, 0xF881AB87, 0xF8A62EFC, 0xF8BDA989, 0xF8D7AF3B, 0xF8E5F73A, 0xF8EC5751, 0xF8F515E4, 0xF8FBCC25, 0xF91B8C33, 0xF929F61D, 0xF9A401F, 0xF9A51B92, 0xF9B6426D, 0xF9DC2AF7, 0xF9FB4B71, 0xFA037FEB, 0xFA2402C8, 0xFA3A16E7, 0xFA6373BB, 0xFB138A5, 0xFB18CB19, 0xFB1A9CDE, 0xFB4000DC, 0xFB45728E, 0xFB4D062D, 0xFB93C5A2, 0xFB9BABF5, 0xFBB85E02, 0xFBBA699A, 0xFBBAC350, 0xFBDBE374, 0xFBDE9FD8, 0xFBF5536A, 0xFC0DB4C3, 0xFC13CE80, 0xFC227584, 0xFC30DDFF, 0xFC50151C, 0xFC70EEC7, 0xFC7464A0, 0xFC942D7C, 0xFCE995D, 0xFD0F7EDD, 0xFD103BA7, 0xFD261E30, 0xFD309DC8, 0xFD4B5B3B, 0xFD60F5AB, 0xFD66A429, 0xFD8B1AC2, 0xFD99BE2B, 0xFDA62DE, 0xFDA7B6CA, 0xFDF2F7C2, 0xFDF6D8DA, 0xFE485135, 0xFE903D0F, 0xFE9A39F8, 0xFEA40B6C, 0xFEB0C0C8, 0xFF06772A, 0xFF1F6AEB, 0xFF43C18D, 0xFF6191E1, 0xFF62D324, 0xFF7D44E6, 0xFFB2ADA1, 0xFFDF46F0, 0xFFED3676, 0xFFED9BAD, 0xFFF149FE };

        public static string[] nativeNames = { "get_num_dlc_vehicles", "set_ped_infinite_ammo_clip", "special_ability_fill_meter", "network_clan_get_membership_desc", "network_can_bail", "network_bail_transition", "network_can_bet", "is_warning_message_active", "grab_area_details", "clear_unsynced_projectiles", "network_get_num_participants", "get_is_vehicle_primary_colour_custom", "get_is_vehicle_secondary_colour_custom", "get_num_mod_colors", "get_num_vehicle_window_tints", "set_vehicle_can_be_used_by_fleeing_peds", "set_vehicle_allow_no_passengers_lockon", "set_vehicle_engine_can_degrade", "set_player_parachute_pack_tint_index", "set_disable_vehicle_petrol_tank_damage", "bad_sport_player_left_detected", "set_offscreen_scenario", "script_set_viewport_mirrored", "network_player_is_badsport", "set_display_website_brightness", "set_ped_path_may_enter_water", "is_player_switch_in_progress", "does_wind_srl_generator_exist", "is_conversation_nearest_handle_in_area", "network_is_ped_animation_at_stop", "network_clear_vehicle_nightvision_tint", "get_ptfx_cinematic_lod_multiplier", "add_door_to_system", "remove_door_from_system", "network_prefetch_2d_texture_tracker", "play_sound_from_between_underwater_texture", "is_flash_light_on", "set_chase_event_cache_index", "set_playerindex_weapons_mods_index", "set_car_passenger_flag_index", "get_lod_auto_multiplier", "get_cams_music_variations", "system_get_inbox_icon", "network_get_player_animation_scene_locked", "network_is_player_actions_transitioning_ui", "is_house_tv_switched_on", "is_advanced_playback_on_screen", "is_drops_stars_in_ambient_zone", "is_locked_vehicle_running", "is_allowed_blocking_anim_in_interior", "get_player_and_ragdoll_controls", "get_player_advanced_modifier_privileges", "does_entity_obj_time_exist", "get_local_player_2d_animation_icon", "set_ped_any_rope_target", "set_ped_ability_knock_human", "get_vertex_models_properties", "get_height_length_vector", "network_get_player_assigned_arrest", "network_get_player_ratio_focus", "is_allowed_melee_in_interior", "get_vehicle_fixed_group_state", "get_fixed_gun_at_coord", "does_available_focuspoint_task_exist", "get_net_increment_progress", "set_vehicle_cam_boost_blur_angle", "get_original_enemy_cop", "get_gameplay_angled_clean", "get_gameplay_list_bounty", "get_paused_map_streaming_request", "get_player_passengers_shake_percent", "set_player_original_scores_percent", "get_roll_upsidedown_percent", "get_literal_gameplay_length", "get_args_of_forward_vector", "get_quadbike_display_variations", "get_last_entity_aiming_vehicle", "is_ambient_ipl_trigger", "get_bool_combat_stats", "is_event_modifier_angle", "set_progress_or_position", "network_set_activity_player_simulate_headtracking_animation", "set_automatically_fixed_hud", "get_smokegrenade_scorched_colour", "get_closest_actions_spline_of_type", "get_secondary_color_sprite", "get_gamertag_npc_sprite", "task_get_throw_secondary", "fillout_streamed_actions_list", "set_focuspoint_obj_accuracy", "get_faded_dynamic_frame", "does_variable_ambient_exist", "set_key_display_texture", "load_additional_setting_ambient_zone", "is_vehicle_active_idle_sitting", "get_texture_rgba_reloaded", "create_cache_special_ped", "network_set_activity_player_flag_switch", "network_set_activity_player_sit_animation", "clear_player_has_2_characters_enable", "reset_physics_los_state", "clear_timed_cheat_state", "network_values_prefetch_stats", "is_dead_when_loaded", "add_may_push_object", "get_physical_turning_coords", "get_on_rope_weapon", "get_vehicle_blipped_pickup_sound", "network_get_blimp_in_gameplay", "get_vehicle_average_pickups_ipl", "network_get_background_loading_recipients", "network_get_animations_playtime_ratio", "network_get_ai_combat_speed", "get_entity_action_area_collide", "get_entity_amount_axles_hold", "set_vehicle_car_mesh_only", "set_ambient_zone_constant_generations", "network_get_status_of_3d_targettable_obj", "network_get_control_of_event_label", "network_has_control_of_pavement_stats", "render_ambient_zone_ptfx_channel", "does_ped_have_ai_blip", "is_ped_hiding_near_indicatorlights", "is_ped_running_cash_drop", "is_ped_in_region_simple", "is_ambient_zone_characters_safe", "network_is_local_talking", "network_is_friend_index_online", "remove_animation_effect_drunk", "is_entity_shaking_when_shooting", "get_ped_nth_incident_node", "get_ped_nth_incident_size", "play_stream_from_position", "get_safe_zone_size", "network_set_player_physical_colour", "set_building_common_texture", "set_animal_path_matrix", "get_ped_weapon_flags_local", "get_local_player_vehicle_fixed_design", "set_player_vehicle_alone_impact", "set_time_idle_drop", "get_player_stat_increment_gesturing", "set_traffic_animations_race_duration", "network_set_max_hint_sticky", "network_set_actions_respawn_cargobob", "get_entity_appropriate_dropshadow_wrap", "get_entity_animation_phys_preview", "get_entity_active_blimp_far", "get_entity_accepted_rgb_key", "set_ped_armed_driveby_actions", "set_ped_allocate_fading_voice", "set_ped_activity_shoot_events", "set_ped_active_id_colour", "get_player_stat_stars_visibility", "get_random_ped_2d_operation_info", "get_blip_node_msg", "get_time_since_a_respray_modify", "get_local_player_aim_state", "network_give_player_betting_list", "set_vehicle_around_heist_phase", "is_player_allowed_pc_holdups", "is_player_anims_breaking_script", "network_spent_nm_music", "get_gameply_cam_distance_delta", "clear_all_broken_glass", "attach_cam_to_single_roof", "is_player_climbing_above_targets", "get_veh_nearby_clip", "get_ped_vigilante_proximity", "use_weapontype_reticule", "set_player_zombiism_locally", "get_function_exists", "start_rendezvous_reach", "special_bullet_cheats", "network_models_only", "multiplayer_playing_missions", "int_scores_sorted", "initial_hospital_coordinates", "icon_game_playtime", "gps_changed_screen", "explode_enemies_targetted", "driving_defensive_to", "draw_spawned_crew", "sit_seat", "ai_phone_args", "char_followers_full", "get_offsets_multiple", "deactivate_throttle_limit", "disable_reloaded_drops", "disable_tyres_noise", "draw_ped_fade", "enable_interrupt_aiming", "enter_interacting_marker", "has_notext_option", "member_nm_waypoint", "network_give_player_cash", "network_receive_player_cash", "task_follow_nav_mesh_to_coord_advanced", "does_entity_exist", "custom_entity_priority", "custom_menu_coordinates", "cutscene_path_actor", "can_shuffle_seat", "cancel_seek_active", "get_player_ped", "get_player_ped_script_index", "set_player_model", "change_player_ped", "get_player_rgb_colour", "get_number_of_players", "get_player_team", "set_player_team", "get_player_name", "get_wanted_level_radius", "get_player_wanted_centre_position", "set_player_wanted_centre_position", "get_wanted_level_threshold", "set_player_wanted_level", "set_player_wanted_level_no_drop", "set_player_wanted_level_now", "are_player_flashing_stars_about_to_drop", "are_player_stars_greyed_out", "set_dispatch_cops_for_player", "is_player_wanted_level_greater", "clear_player_wanted_level", "is_player_dead", "is_player_pressing_horn", "set_player_control", "get_player_wanted_level", "set_max_wanted_level", "set_police_radar_blips", "set_police_ignore_player", "is_player_playing", "set_everyone_ignore_player", "set_all_random_peds_flee", "set_all_random_peds_flee_this_frame", "set_ignore_low_priority_shocking_events", "set_wanted_level_multiplier", "set_wanted_level_difficulty", "reset_wanted_level_difficulty", "start_firing_amnesty", "report_crime", "can_player_start_mission", "is_player_ready_for_cutscene", "is_player_targetting_entity", "get_player_target_entity", "is_player_free_aiming", "is_player_free_aiming_at_entity", "set_player_can_do_drive_by", "set_player_can_be_hassled_by_gangs", "set_player_can_use_cover", "get_max_wanted_level", "is_player_targetting_anything", "set_player_sprint", "reset_player_stamina", "restore_player_stamina", "get_player_sprint_time_remaining", "get_player_underwater_time_remaining", "get_player_group", "get_player_max_armour", "is_player_control_on", "is_player_script_control_on", "is_player_climbing", "is_player_being_arrested", "get_players_last_vehicle", "get_player_index", "int_to_playerindex", "get_time_since_player_hit_vehicle", "get_time_since_player_hit_ped", "get_time_since_player_drove_on_pavement", "get_time_since_player_drove_against_traffic", "is_player_free_for_ambient_task", "player_id", "player_ped_id", "force_cleanup", "set_player_may_only_enter_this_vehicle", "give_achievement_to_player", "has_achievement_been_passed", "is_player_online", "is_player_logging_in_np", "display_system_signin_ui", "is_system_ui_being_displayed", "set_player_invincible", "get_player_invincible", "remove_player_helmet", "give_player_ragdoll_control", "set_player_lockon", "set_player_targeting_mode", "clear_player_has_damaged_at_least_one_ped", "has_player_damaged_at_least_one_ped", "set_air_drag_multiplier_for_players_vehicle", "get_time_since_last_arrest", "get_time_since_last_death", "assisted_movement_close_route", "assisted_movement_flush_route", "set_player_forced_aim", "set_player_forced_zoom", "disable_player_firing", "set_player_max_armour", "special_ability_deactivate", "special_ability_reset", "reset_special_ability_controls_cinematic", "special_ability_lock", "special_ability_unlock", "is_special_ability_unlocked", "is_special_ability_active", "is_special_ability_meter_full", "enable_special_ability", "is_special_ability_enabled", "set_special_ability_multiplier", "start_player_teleport", "stop_player_teleport", "is_player_teleport_active", "get_player_current_stealth_noise", "set_player_weapon_damage_modifier", "set_player_vehicle_damage_modifier", "set_player_parachute_tint_index", "get_player_parachute_tint_index", "set_player_noise_multiplier", "simulate_player_input_gait", "reset_player_input_gait", "set_player_simulate_aiming", "is_player_riding_train", "does_entity_have_drawable", "does_entity_have_physics", "has_entity_anim_finished", "has_entity_been_damaged_by_any_object", "has_entity_been_damaged_by_any_ped", "has_entity_been_damaged_by_any_vehicle", "has_entity_been_damaged_by_entity", "has_entity_clear_los_to_entity", "has_entity_clear_los_to_entity_in_front", "has_entity_collided_with_anything", "get_entity_anim_current_time", "get_entity_anim_total_time", "get_entity_attached_to", "get_entity_coords", "get_entity_forward_vector", "get_entity_forward_x", "get_entity_forward_y", "get_entity_heading", "get_entity_health", "get_entity_max_health", "set_entity_max_health", "get_entity_height", "get_entity_height_above_ground", "get_entity_matrix", "get_entity_model", "get_offset_from_entity_given_world_coords", "get_offset_from_entity_in_world_coords", "get_entity_pitch", "get_entity_quaternion", "get_entity_roll", "get_entity_rotation", "get_entity_rotation_velocity", "get_entity_script", "get_entity_speed", "get_entity_speed_vector", "get_entity_upright_value", "get_entity_velocity", "get_nearest_player_to_entity", "get_entity_type", "is_an_entity", "is_entity_a_ped", "is_entity_a_mission_entity", "is_entity_a_vehicle", "is_entity_an_object", "is_entity_at_coord", "is_entity_at_entity", "is_entity_attached", "is_entity_attached_to_any_object", "is_entity_attached_to_any_ped", "is_entity_attached_to_any_vehicle", "is_entity_attached_to_entity", "is_entity_dead", "is_entity_in_air", "is_entity_in_angled_area", "is_entity_in_area", "is_entity_in_zone", "is_entity_in_water", "is_entity_on_screen", "is_entity_playing_anim", "is_entity_static", "is_entity_touching_entity", "is_entity_upright", "is_entity_upsidedown", "is_entity_visible", "is_entity_visible_to_script", "is_entity_occluded", "is_entity_waiting_for_world_collision", "apply_force_to_entity", "attach_entity_to_entity", "attach_entity_to_entity_physically", "clear_entity_last_damage_entity", "delete_entity", "detach_entity", "freeze_entity_position", "play_entity_anim", "play_synchronized_entity_anim", "stop_entity_anim", "stop_synchronized_entity_anim", "set_entity_anim_current_time", "set_entity_anim_speed", "set_entity_as_mission_entity", "set_entity_as_no_longer_needed", "set_ped_as_no_longer_needed", "set_vehicle_as_no_longer_needed", "set_object_as_no_longer_needed", "set_entity_can_be_damaged", "set_entity_can_be_damaged_by_relationship_group", "set_entity_can_be_targeted_without_los", "set_entity_collision", "set_entity_coords", "set_entity_coords_no_offset", "set_entity_dynamic", "set_entity_heading", "set_entity_health", "set_entity_invincible", "set_entity_is_target_priority", "set_entity_lights", "set_entity_load_collision_flag", "set_entity_max_speed", "set_entity_only_damaged_by_player", "set_entity_only_damaged_by_relationship_group", "set_entity_proofs", "set_entity_quaternion", "set_entity_records_collisions", "set_entity_rotation", "set_entity_visible", "set_entity_velocity", "set_entity_has_gravity", "set_entity_lod_dist", "set_entity_alpha", "get_entity_alpha", "reset_entity_alpha", "set_entity_render_scorched", "create_model_swap", "remove_model_swap", "create_model_hide", "remove_model_hide", "create_forced_object", "remove_forced_object", "set_entity_no_collision_entity", "set_entity_motion_blur", "create_ped", "delete_ped", "clone_ped", "is_ped_in_vehicle", "is_ped_in_model", "is_ped_in_any_vehicle", "is_cop_ped_in_area_3d", "is_ped_injured", "is_ped_hurt", "is_ped_fatally_injured", "is_conversation_ped_dead", "is_ped_aiming_from_cover", "is_ped_reloading", "is_ped_a_player", "create_ped_inside_vehicle", "set_ped_desired_heading", "is_ped_facing_ped", "is_ped_in_melee_combat", "is_ped_stopped", "is_ped_shooting_in_area", "is_any_ped_shooting_in_area", "is_ped_shooting", "set_ped_accuracy", "get_ped_accuracy", "is_ped_model", "explode_ped_head", "remove_ped_elegantly", "add_armour_to_ped", "set_ped_armour", "set_ped_into_vehicle", "can_create_random_ped", "create_random_ped", "create_random_ped_as_driver", "can_create_random_driver", "set_ped_move_anims_blend_out", "set_ped_can_be_dragged_out", "is_ped_male", "is_ped_human", "get_vehicle_ped_is_in", "reset_ped_last_vehicle", "set_ped_density_multiplier_this_frame", "set_scenario_ped_density_multiplier_this_frame", "set_ped_non_creation_area", "clear_ped_non_creation_area", "is_ped_on_mount", "get_mount", "is_ped_on_vehicle", "is_ped_on_specific_vehicle", "set_ped_money", "get_ped_money", "set_ped_suffers_critical_hits", "is_ped_sitting_in_vehicle", "is_ped_sitting_in_any_vehicle", "is_ped_on_foot", "is_ped_on_any_bike", "is_ped_planting_bomb", "get_dead_ped_pickup_coords", "is_ped_in_any_boat", "is_ped_in_any_sub", "is_ped_in_any_heli", "is_ped_in_any_plane", "is_ped_in_flying_vehicle", "set_ped_dies_in_water", "set_ped_dies_in_sinking_vehicle", "get_ped_armour", "set_ped_stay_in_vehicle_when_jacked", "set_ped_can_be_shot_in_vehicle", "get_ped_last_damage_bone", "clear_ped_last_damage_bone", "set_ai_weapon_damage_modifier", "reset_ai_weapon_damage_modifier", "set_ped_can_be_targetted", "set_ped_can_be_targetted_by_team", "set_ped_can_be_targetted_by_player", "set_time_exclusive_display_texture", "is_ped_in_any_police_vehicle", "is_ped_falling", "is_ped_jumping", "is_ped_climbing", "is_ped_diving", "get_ped_parachute_state", "set_ped_parachute_tint_index", "get_ped_parachute_tint_index", "set_ped_ducking", "is_ped_ducking", "is_ped_in_any_taxi", "set_ped_id_range", "set_ped_seeing_range", "set_ped_hearing_range", "set_ped_visual_field_min_angle", "set_ped_visual_field_max_angle", "set_ped_visual_field_min_elevation_angle", "set_ped_visual_field_max_elevation_angle", "set_ped_stealth_movement", "get_ped_stealth_movement", "create_group", "set_ped_as_group_leader", "set_ped_as_group_member", "remove_group", "remove_ped_from_group", "is_ped_group_member", "set_group_separation_range", "is_ped_prone", "is_ped_in_combat", "is_ped_doing_driveby", "is_ped_jacking", "is_ped_being_jacked", "is_ped_being_stunned", "get_peds_jacker", "get_jack_target", "is_ped_fleeing", "is_ped_in_cover", "is_ped_in_cover_facing_left", "is_ped_going_into_cover", "set_ped_pinned_down", "get_ped_cause_of_death", "get_ped_time_of_death", "set_ped_relationship_group_default_hash", "set_ped_relationship_group_hash", "set_relationship_between_groups", "clear_relationship_between_groups", "add_relationship_group", "remove_relationship_group", "get_relationship_between_peds", "get_ped_relationship_group_default_hash", "get_ped_relationship_group_hash", "get_relationship_between_groups", "set_ped_can_be_targeted_without_los", "set_ped_to_inform_respected_friends", "is_ped_responding_to_event", "set_ped_firing_pattern", "set_ped_shoot_rate", "set_combat_float", "get_combat_float", "get_group_size", "does_group_exist", "get_ped_group_index", "is_ped_in_group", "set_group_formation", "set_group_formation_spacing", "get_vehicle_ped_is_using", "set_exclusive_phone_relationships", "set_ped_gravity", "apply_damage_to_ped", "set_ped_allowed_to_duck", "set_ped_never_leaves_group", "get_ped_type", "set_ped_as_cop", "set_ped_max_health", "get_ped_max_health", "set_ped_max_time_in_water", "set_ped_max_time_underwater", "set_ped_can_be_knocked_off_vehicle", "knock_ped_off_vehicle", "set_ped_coords_no_gang", "get_ped_as_group_member", "set_ped_keep_task", "is_ped_swimming", "is_ped_swimming_under_water", "set_ped_coords_keep_vehicle", "set_ped_dies_in_vehicle", "set_create_random_cops", "can_create_random_cops", "set_ped_as_enemy", "set_ped_can_smash_glass", "is_ped_in_any_train", "is_ped_getting_into_a_vehicle", "is_ped_trying_to_enter_a_locked_vehicle", "set_enable_handcuffs", "set_enable_bound_ankles", "set_can_attack_friendly", "get_ped_alertness", "set_ped_alertness", "set_ped_get_out_upside_down_vehicle", "set_ped_movement_clipset", "reset_ped_movement_clipset", "set_ped_strafe_clipset", "reset_ped_strafe_clipset", "set_ped_weapon_movement_clipset", "reset_ped_weapon_movement_clipset", "set_ped_in_vehicle_context", "reset_ped_in_vehicle_context", "set_ped_alternate_movement_anim", "clear_ped_alternate_movement_anim", "set_ped_gesture_group", "get_ped_drawable_variation", "get_number_of_ped_drawable_variations", "get_ped_texture_variation", "get_number_of_ped_texture_variations", "remove_nightvision_melee", "get_ped_palette_variation", "is_ped_component_variation_valid", "set_ped_component_variation", "set_ped_random_component_variation", "set_ped_random_props", "set_ped_default_component_variation", "set_ped_blend_from_parents", "set_ped_head_blend_data", "update_ped_head_blend_data", "set_ped_head_overlay", "get_ped_head_overlay", "has_ped_head_blend_finished", "get_ped_prop_index", "set_ped_prop_index", "knock_off_ped_prop", "clear_ped_prop", "clear_all_ped_props", "get_ped_prop_texture_index", "set_blocking_of_non_temporary_events", "set_ped_bounds_orientation", "register_target", "register_hated_targets_around_ped", "get_random_ped_at_coord", "get_closest_ped", "set_scenario_peds_to_be_returned_by_next_command", "set_driver_ability", "set_driver_aggressiveness", "can_ped_ragdoll", "set_ped_to_ragdoll", "set_ped_to_ragdoll_with_fall", "set_ped_ragdoll_on_collision", "is_ped_ragdoll", "is_ped_running_ragdoll_task", "set_ped_ragdoll_force_fall", "reset_ped_ragdoll_timer", "set_ped_can_ragdoll", "is_ped_running_mobile_phone_task", "set_ped_angled_defensive_area", "set_ped_sphere_defensive_area", "set_ped_defensive_area_attached_to_ped", "remove_ped_defensive_area", "get_ped_defensive_area_position", "revive_injured_ped", "resurrect_ped", "set_ped_name_debug", "get_ped_extracted_displacement", "set_ped_dies_when_injured", "set_ped_enable_weapon_blocking", "reset_ped_visible_damage", "apply_ped_blood", "apply_ped_damage_decal", "apply_ped_damage_pack", "clear_ped_blood_damage", "clear_ped_wetness", "set_ped_wetness_height", "set_ped_wetness_enabled_this_frame", "set_ped_sweat", "clear_ped_decorations", "was_ped_skeleton_updated", "get_ped_bone_coords", "create_nm_message", "give_ped_nm_message", "add_scenario_blocking_area", "remove_scenario_blocking_areas", "remove_scenario_blocking_area", "set_scenario_peds_spawn_in_sphere_area", "is_ped_using_scenario", "is_ped_using_any_scenario", "play_facial_anim", "set_facial_idle_anim_override", "clear_facial_idle_anim_override", "set_ped_can_play_gesture_anims", "set_ped_can_play_viseme_anims", "set_ped_can_play_ambient_anims", "set_ped_can_play_ambient_base_anims", "set_ped_can_head_ik", "set_ped_can_leg_ik", "set_ped_can_use_auto_conversation_lookat", "is_ped_headtracking_ped", "is_ped_headtracking_entity", "set_ped_primary_lookat", "set_ped_config_flag", "set_ped_reset_flag", "get_ped_config_flag", "get_ped_reset_flag", "set_ped_group_member_passenger_index", "set_ped_can_evasive_dive", "is_ped_evasive_diving", "set_ped_shoots_at_coord", "set_ped_model_is_suppressed", "stop_any_ped_model_being_suppressed", "set_ped_can_be_targeted_when_injured", "set_ped_generates_dead_body_events", "set_ped_can_ragdoll_from_player_impact", "give_ped_helmet", "remove_ped_helmet", "set_ped_helmet", "set_ped_helmet_flag", "set_ped_helmet_prop_index", "set_ped_helmet_texture_index", "is_ped_wearing_helmet", "set_ped_to_load_cover", "set_ped_can_cower_in_cover", "set_ped_can_peek_in_cover", "set_ped_plays_head_on_horn_anim_when_dies_in_vehicle", "set_ped_leg_ik_mode", "set_ped_motion_blur", "set_ped_can_switch_weapon", "set_ped_dies_instantly_in_water", "stop_ped_weapon_firing_when_dropped", "set_scripted_anim_seat_offset", "set_ped_combat_movement", "get_ped_combat_movement", "set_ped_combat_ability", "set_ped_combat_range", "get_ped_combat_range", "set_ped_combat_attributes", "set_ped_target_loss_response", "is_ped_performing_stealth_kill", "is_ped_being_stealth_killed", "was_ped_killed_by_stealth", "was_ped_killed_by_takedown", "set_ped_flee_attributes", "set_ped_cower_hash", "set_ped_steers_around_peds", "set_ped_steers_around_objects", "set_ped_steers_around_vehicles", "is_any_ped_near_point", "get_ped_flood_invincibility", "is_tracked_ped_visible", "is_ped_tracked", "has_ped_received_event", "get_ped_bone_index", "get_ped_ragdoll_bone_index", "set_ped_enveff_scale", "get_ped_enveff_scale", "set_enable_ped_enveff_scale", "create_synchronized_scene", "is_synchronized_scene_running", "set_synchronized_scene_origin", "set_synchronized_scene_phase", "get_synchronized_scene_phase", "set_synchronized_scene_rate", "get_synchronized_scene_rate", "set_synchronized_scene_looped", "is_synchronized_scene_looped", "attach_synchronized_scene_to_entity", "detach_synchronized_scene", "force_ped_motion_state", "set_ped_max_move_blend_ratio", "set_ped_min_move_blend_ratio", "set_ped_move_rate_override", "get_ped_nearby_vehicles", "get_ped_nearby_peds", "is_ped_using_action_mode", "set_ped_using_action_mode", "set_ped_capsule", "register_pedheadshot", "unregister_pedheadshot", "is_pedheadshot_valid", "is_pedheadshot_ready", "get_pedheadshot_txd_string", "set_pedheadshot_custom_lighting", "set_pedheadshot_custom_light", "set_ik_target", "request_action_mode_asset", "has_action_mode_asset_loaded", "remove_action_mode_asset", "request_stealth_mode_asset", "has_stealth_mode_asset_loaded", "remove_stealth_mode_asset", "set_ped_lod_multiplier", "does_ped_exist_with_decorator", "create_vehicle", "delete_vehicle", "is_vehicle_model", "does_script_vehicle_generator_exist", "create_script_vehicle_generator", "delete_script_vehicle_generator", "set_script_vehicle_generator", "set_all_vehicle_generators_active_in_area", "set_all_vehicle_generators_active", "set_all_low_priority_vehicle_generators_active", "set_vehicle_on_ground_properly", "set_all_vehicles_spawn", "is_vehicle_stuck_on_roof", "add_vehicle_upsidedown_check", "remove_vehicle_upsidedown_check", "is_vehicle_stopped", "get_vehicle_number_of_passengers", "get_vehicle_max_number_of_passengers", "set_vehicle_density_multiplier_this_frame", "set_random_vehicle_density_multiplier_this_frame", "set_parked_vehicle_density_multiplier_this_frame", "set_far_draw_vehicles", "set_number_of_parked_vehicles", "set_vehicle_doors_locked", "set_ped_targettable_vehicle_destroy", "disable_vehicle_impact_explosion_activation", "set_vehicle_doors_locked_for_player", "get_vehicle_doors_locked_for_player", "set_vehicle_doors_locked_for_all_players", "set_vehicle_doors_locked_for_team", "explode_vehicle", "set_vehicle_out_of_control", "set_vehicle_timed_explosion", "set_taxi_lights", "is_taxi_light_on", "is_vehicle_in_garage_area", "set_vehicle_colours", "set_vehicle_fullbeam", "steer_unlock_bias", "set_vehicle_custom_primary_colour", "get_vehicle_custom_primary_colour", "clear_vehicle_custom_primary_colour", "set_vehicle_custom_secondary_colour", "get_vehicle_custom_secondary_colour", "clear_vehicle_custom_secondary_colour", "set_can_respray_vehicle", "set_boat_anchor", "set_vehicle_siren", "is_vehicle_siren_on", "set_vehicle_strong", "remove_vehicle_stuck_check", "get_vehicle_colours", "is_vehicle_seat_free", "get_ped_in_vehicle_seat", "get_vehicle_lights_state", "is_vehicle_tyre_burst", "set_vehicle_forward_speed", "set_ped_enabled_bike_ringtone", "set_vehicle_tyre_burst", "set_vehicle_doors_shut", "set_vehicle_tyres_can_burst", "get_vehicle_tyres_can_burst", "set_vehicle_wheels_can_break", "set_vehicle_door_open", "remove_vehicle_window", "roll_down_windows", "roll_down_window", "roll_up_window", "smash_vehicle_window", "fix_vehicle_window", "set_vehicle_lights", "set_vehicle_alarm", "start_vehicle_alarm", "is_vehicle_alarm_activated", "set_vehicle_interiorlight", "set_vehicle_light_multiplier", "attach_vehicle_to_trailer", "detach_vehicle_from_trailer", "is_vehicle_attached_to_trailer", "set_vehicle_tyre_fixed", "set_vehicle_number_plate_text", "get_vehicle_number_plate_text", "get_number_of_vehicle_number_plates", "set_vehicle_number_plate_text_index", "get_vehicle_number_plate_text_index", "set_random_trains", "create_mission_train", "switch_train_track", "delete_all_trains", "set_train_speed", "set_train_cruise_speed", "set_random_boats", "set_garbage_trucks", "does_vehicle_have_stuck_vehicle_check", "get_vehicle_recording_id", "request_vehicle_recording", "has_vehicle_recording_been_loaded", "remove_vehicle_recording", "get_position_of_vehicle_recording_at_time", "get_rotation_of_vehicle_recording_at_time", "get_total_duration_of_vehicle_recording_id", "get_total_duration_of_vehicle_recording", "get_position_in_recording", "get_time_position_in_recording", "start_playback_recorded_vehicle", "start_playback_recorded_vehicle_with_flags", "stop_playback_recorded_vehicle", "pause_playback_recorded_vehicle", "unpause_playback_recorded_vehicle", "is_playback_going_on_for_vehicle", "is_playback_using_ai_going_on_for_vehicle", "get_current_playback_for_vehicle", "skip_to_end_and_stop_playback_recorded_vehicle", "set_playback_speed", "start_playback_recorded_vehicle_using_ai", "skip_time_in_playback_recorded_vehicle", "set_playback_to_use_ai", "set_playback_to_use_ai_try_to_revert_back_later", "explode_vehicle_in_cutscene", "add_vehicle_stuck_check_with_warp", "set_vehicle_model_is_suppressed", "get_random_vehicle_in_sphere", "get_random_vehicle_front_bumper_in_sphere", "get_random_vehicle_back_bumper_in_sphere", "get_closest_vehicle", "get_train_carriage", "delete_mission_train", "set_mission_train_as_no_longer_needed", "set_mission_train_coords", "is_this_model_a_boat", "is_this_model_a_plane", "is_this_model_a_heli", "is_this_model_a_car", "is_this_model_a_train", "is_this_model_a_bike", "is_this_model_a_bicycle", "is_this_model_a_quadbike", "set_heli_blades_full_speed", "set_heli_blades_speed", "set_vehicle_can_be_targetted", "set_vehicle_can_be_visibly_damaged", "get_vehicle_dirt_level", "set_vehicle_dirt_level", "is_vehicle_door_fully_open", "set_vehicle_engine_on", "set_vehicle_undriveable", "set_vehicle_provides_cover", "set_vehicle_door_control", "set_vehicle_door_latched", "get_vehicle_door_angle_ratio", "set_vehicle_door_shut", "set_vehicle_door_broken", "set_vehicle_can_break", "does_vehicle_have_roof", "is_big_vehicle", "get_number_of_vehicle_model_colours", "get_number_of_vehicle_colours", "set_vehicle_colour_combination", "get_vehicle_colour_combination", "set_vehicle_is_considered_by_player", "get_random_vehicle_model_in_memory", "get_vehicle_door_lock_status", "is_vehicle_door_damaged", "is_vehicle_bumper_broken_off", "is_cop_vehicle_in_area_3d", "is_vehicle_on_all_wheels", "get_vehicle_model_value", "get_vehicle_layout_hash", "set_render_train_as_derailed", "set_vehicle_extra_colours", "get_vehicle_extra_colours", "stop_all_garage_activity", "set_vehicle_fixed", "set_vehicle_deformation_fixed", "remove_vehicles_from_generators_in_area", "set_vehicle_steer_bias", "is_vehicle_extra_turned_on", "set_vehicle_extra", "does_extra_exist", "set_convertible_roof", "lower_convertible_roof", "raise_convertible_roof", "get_convertible_roof_state", "is_vehicle_a_convertible", "is_vehicle_stopped_at_traffic_lights", "set_vehicle_damage", "get_vehicle_engine_health", "set_vehicle_engine_health", "get_vehicle_petrol_tank_health", "set_vehicle_petrol_tank_health", "is_vehicle_stuck_timer_up", "reset_vehicle_stuck_timer", "is_vehicle_driveable", "set_vehicle_has_been_owned_by_player", "set_vehicle_needs_to_be_hotwired", "start_vehicle_horn", "set_vehicle_has_strong_axles", "get_display_name_from_vehicle_model", "get_vehicle_deformation_at_pos", "set_vehicle_livery", "get_vehicle_livery", "get_vehicle_livery_count", "is_vehicle_window_intact", "reset_vehicle_wheels", "is_heli_part_broken", "was_counter_activated", "set_vehicle_name_debug", "set_vehicle_explodes_on_high_explosion_damage", "is_any_vehicle_near_point", "request_vehicle_high_detail_model", "remove_vehicle_high_detail_model", "is_vehicle_high_detail", "request_vehicle_asset", "has_vehicle_asset_loaded", "remove_vehicle_asset", "attach_vehicle_to_tow_truck", "detach_vehicle_from_tow_truck", "detach_vehicle_from_any_tow_truck", "is_vehicle_attached_to_tow_truck", "get_entity_attached_to_tow_truck", "set_vehicle_automatically_attaches", "set_vehicle_burnout", "is_vehicle_in_burnout", "set_vehicle_reduce_grip", "set_vehicle_indicator_lights", "set_vehicle_brake_lights", "set_vehicle_handbrake", "set_vehicle_brake", "get_vehicle_trailer_vehicle", "set_vehicle_rudder_broken", "get_vehicle_max_braking", "get_vehicle_max_traction", "get_vehicle_acceleration", "get_vehicle_model_max_braking", "get_vehicle_model_max_traction", "get_vehicle_model_acceleration", "get_vehicle_class_max_traction", "get_vehicle_class_max_agility", "get_vehicle_class_max_acceleration", "get_vehicle_class_max_braking", "is_vehicle_searchlight_on", "set_vehicle_searchlight", "get_num_mod_kits", "set_vehicle_mod_kit", "get_vehicle_mod_kit", "get_vehicle_mod_kit_type", "get_vehicle_wheel_type", "set_vehicle_wheel_type", "set_vehicle_mod_color_1", "set_vehicle_mod_color_2", "get_vehicle_mod_color_1", "get_vehicle_mod_color_2", "remove_vehicle_mod_kit", "set_vehicle_mod", "get_vehicle_mod", "get_vehicle_mod_variation", "get_num_vehicle_mods", "remove_vehicle_mod", "toggle_vehicle_mod", "is_toggle_mod_on", "get_mod_text_label", "get_mod_slot_name", "get_livery_name", "get_vehicle_mod_modifier_value", "preload_vehicle_mod", "has_preload_mods_finished", "release_preload_mods", "set_vehicle_tyre_smoke_color", "get_vehicle_tyre_smoke_color", "set_vehicle_window_tint", "get_vehicle_window_tint", "get_vehicle_color", "get_vehicle_cause_of_destruction", "set_vehicle_is_wanted", "disable_plane_aileron", "set_vehicle_lod_multiplier", "set_vehicle_shoot_at_target", "get_vehicle_plate_type", "track_vehicle_visibility", "is_vehicle_visible", "set_vehicle_gravity", "is_vehicle_stolen", "set_vehicle_is_stolen", "detach_vehicle_from_cargobob", "detach_vehicle_from_any_cargobob", "is_vehicle_attached_to_cargobob", "get_vehicle_attached_to_cargobob", "attach_vehicle_to_cargobob", "get_closest_vehicle_turning_bloodspray", "get_vehicle_has_back_recursive", "does_vehicle_have_weapons", "disable_vehicle_weapon", "get_vehicle_class", "get_vehicle_class_from_name", "set_players_last_vehicle", "set_vehicle_friction_override", "set_vehicle_max_str_trap", "get_vehicle_deformation_get_tree", "does_vehicle_exist_with_decorator", "create_object", "create_object_no_offset", "delete_object", "place_object_on_ground_properly", "slide_object", "set_object_targettable", "get_closest_object_of_type", "has_object_been_broken", "has_closest_object_of_type_been_broken", "set_state_of_closest_door_of_type", "get_state_of_closest_door_of_type", "is_door_closed", "is_garage_empty", "does_object_of_type_exist_at_coords", "is_point_in_angled_area", "set_object_physics_params", "get_object_fragment_damage_health", "set_activate_object_physics_as_soon_as_it_is_unfrozen", "is_any_object_near_point", "is_object_near_point", "track_object_visibility", "is_object_visible", "create_pickup", "create_pickup_rotate", "create_ambient_pickup", "create_portable_pickup", "attach_portable_pickup_to_ped", "detach_portable_pickup_from_ped", "get_safe_pickup_coords", "get_pickup_coords", "remove_all_pickups_of_type", "has_pickup_been_collected", "remove_pickup", "create_money_pickups", "does_pickup_exist", "does_pickup_object_exist", "set_pickup_regeneration_time", "set_team_pickup_object", "set_force_object_this_frame", "does_object_exist_with_decorator", "task_pause", "task_stand_still", "task_jump", "task_cower", "task_hands_up", "task_open_vehicle_door", "task_enter_vehicle", "task_leave_vehicle", "task_sky_dive", "task_parachute", "task_parachute_to_target", "set_parachute_task_target", "set_parachute_task_thrust", "task_rappel_from_heli", "task_vehicle_drive_to_coord", "task_vehicle_drive_to_coord_longrange", "task_vehicle_drive_wander", "task_follow_to_offset_of_entity", "task_go_straight_to_coord", "task_go_straight_to_coord_relative_to_entity", "task_achieve_heading", "task_flush_route", "task_extend_route", "task_follow_point_route", "task_go_to_entity", "task_smart_flee_coord", "task_smart_flee_ped", "task_react_and_flee_ped", "task_shocking_event_react", "task_wander_in_area", "task_wander_standard", "task_vehicle_park", "task_stealth_kill", "task_plant_bomb", "task_follow_nav_mesh_to_coord", "set_ped_path_can_use_climbovers", "set_ped_path_can_use_ladders", "set_ped_path_can_drop_from_height", "set_ped_paths_width_plant", "set_ped_path_prefer_to_avoid_water", "set_ped_path_avoid_fire", "get_navmesh_route_distance_remaining", "get_navmesh_route_result", "task_go_to_coord_any_means", "task_play_anim", "stop_anim_task", "task_scripted_animation", "play_entity_scripted_anim", "stop_anim_playback", "set_anim_weight", "set_anim_rate", "set_anim_looped", "task_vehicle_play_anim", "task_look_at_coord", "task_look_at_entity", "task_clear_look_at", "open_sequence_task", "close_sequence_task", "task_perform_sequence", "clear_sequence_task", "set_sequence_to_repeat", "get_sequence_progress", "get_is_task_active", "get_script_task_status", "task_leave_any_vehicle", "task_aim_gun_scripted", "task_aim_gun_scripted_with_target", "task_aim_gun_at_entity", "task_turn_ped_to_face_entity", "task_aim_gun_at_coord", "task_shoot_at_coord", "task_shuffle_to_next_vehicle_seat", "clear_ped_tasks", "clear_ped_secondary_task", "task_everyone_leave_vehicle", "task_goto_entity_offset", "task_goto_entity_offset_xy", "task_turn_ped_to_face_coord", "task_vehicle_temp_action", "task_vehicle_mission", "task_vehicle_mission_ped_target", "task_vehicle_mission_coors_target", "task_vehicle_escort", "task_vehicle_follow", "task_vehicle_chase", "task_vehicle_heli_protect", "task_heli_chase", "task_plane_chase", "task_plane_land", "task_heli_mission", "task_plane_mission", "task_boat_mission", "task_drive_by", "set_driveby_task_target", "task_use_mobile_phone", "task_use_mobile_phone_timed", "task_chat_to_ped", "add_follow_navmesh_to_phone_task", "task_warp_ped_into_vehicle", "task_shoot_at_entity", "task_climb", "task_climb_ladder", "clear_ped_tasks_immediately", "task_perform_sequence_from_progress", "set_next_desired_move_state", "set_ped_desired_move_blend_ratio", "get_ped_desired_move_blend_ratio", "task_goto_entity_aiming", "task_set_decision_maker", "task_set_sphere_defensive_area", "task_clear_defensive_area", "task_ped_slide_to_coord", "task_ped_slide_to_coord_hdg_rate", "add_cover_point", "remove_cover_point", "task_combat_ped", "task_combat_ped_timed", "task_seek_cover_from_pos", "task_seek_cover_from_ped", "task_seek_cover_to_cover_point", "task_seek_cover_to_coords", "task_put_ped_directly_into_cover", "task_exit_cover", "task_put_ped_directly_into_melee", "task_toggle_duck", "task_guard_current_position", "task_guard_sphere_defensive_area", "task_stand_guard", "set_drive_task_cruise_speed", "set_drive_task_max_cruise_speed", "add_cover_blocking_area", "remove_all_cover_blocking_areas", "task_start_scenario_in_place", "task_start_scenario_at_position", "task_use_nearest_scenario_to_coord", "task_use_nearest_scenario_to_coord_warp", "task_use_nearest_scenario_chain_to_coord", "task_use_nearest_scenario_chain_to_coord_warp", "does_scenario_exist_in_area", "is_scenario_occupied", "does_scenario_group_exist", "is_scenario_group_enabled", "set_scenario_group_enabled", "set_exclusive_scenario_group", "reset_exclusive_scenario_group", "is_scenario_type_enabled", "set_scenario_type_enabled", "is_ped_active_in_scenario", "task_combat_hated_targets_in_area", "task_combat_hated_targets_around_ped", "task_combat_hated_targets_around_ped_timed", "task_throw_projectile", "task_swap_weapon", "task_reload_weapon", "is_ped_getting_up", "task_writhe", "is_ped_in_writhe", "open_patrol_route", "close_patrol_route", "add_patrol_route_node", "add_patrol_route_link", "create_patrol_route", "delete_patrol_route", "task_patrol", "task_stay_in_cover", "add_vehicle_subtask_attack_ped", "task_vehicle_shoot_at_ped", "task_vehicle_aim_at_ped", "task_vehicle_shoot_at_coord", "task_vehicle_aim_at_coord", "task_vehicle_goto_navmesh", "task_go_to_coord_while_aiming_at_coord", "task_go_to_coord_while_aiming_at_entity", "task_go_to_coord_and_aim_at_hated_entities_near_coord", "task_go_to_entity_while_aiming_at_coord", "task_go_to_entity_while_aiming_at_entity", "set_high_fall_task", "request_waypoint_recording", "remove_waypoint_recording", "task_follow_waypoint_recording", "is_waypoint_playback_going_on_for_ped", "get_ped_waypoint_progress", "get_ped_waypoint_distance", "set_ped_waypoint_route_offset", "waypoint_playback_get_is_paused", "waypoint_playback_pause", "waypoint_playback_resume", "waypoint_playback_override_speed", "waypoint_playback_use_default_speed", "waypoint_playback_start_aiming_at_ped", "waypoint_playback_start_aiming_at_coord", "waypoint_playback_start_shooting_at_ped", "waypoint_playback_start_shooting_at_coord", "waypoint_playback_stop_aiming_or_shooting", "assisted_movement_request_route", "assisted_movement_remove_route", "task_vehicle_follow_waypoint_recording", "is_waypoint_playback_going_on_for_vehicle", "get_vehicle_waypoint_progress", "get_vehicle_waypoint_target_point", "vehicle_waypoint_playback_pause", "vehicle_waypoint_playback_resume", "vehicle_waypoint_playback_use_default_speed", "vehicle_waypoint_playback_override_speed", "task_set_blocking_of_non_temporary_events", "task_force_motion_state", "is_ped_still", "is_ped_walking", "is_ped_running", "is_ped_sprinting", "is_ped_strafing", "task_synchronized_scene", "task_arrest_ped", "is_ped_running_arrest_task", "is_ped_being_arrested", "uncuff_ped", "is_ped_cuffed", "set_random_seed", "set_time_scale", "set_mission_flag", "get_mission_flag", "set_random_event_flag", "get_random_event_flag", "is_prev_weather_type", "is_next_weather_type", "set_weather_type_persist", "set_weather_type_now_persist", "set_weather_type_now", "set_random_weather_type", "clear_weather_type_persist", "set_override_weather", "clear_override_weather", "set_wind", "set_wind_speed", "get_wind_speed", "set_wind_direction", "get_wind_direction", "get_rain_level", "get_snow_level", "get_game_timer", "get_frame_time", "get_frame_count", "get_random_float_in_range", "get_random_int_in_range", "get_ground_z_for_3d_coord", "asin", "acos", "tan", "atan", "atan2", "get_distance_between_coords", "get_angle_between_2d_vectors", "get_heading_from_vector_2d", "set_bit", "clear_bit", "get_hash_key", "is_area_occupied", "is_position_occupied", "is_point_obscured_by_a_mission_entity", "clear_area", "clear_area_of_vehicles", "clear_angled_area_of_vehicles", "clear_area_of_objects", "clear_area_of_peds", "clear_area_of_cops", "clear_area_of_projectiles", "set_save_menu_active", "set_credits_active", "terminate_all_scripts_with_this_name", "network_set_script_is_safe_for_network_game", "add_hospital_restart", "disable_hospital_restart", "add_police_restart", "disable_police_restart", "ignore_next_restart", "set_fade_in_after_death_arrest", "set_fade_in_after_load", "register_save_house", "set_save_house", "override_save_house", "do_auto_save", "is_auto_save_in_progress", "begin_replay_stats", "end_replay_stats", "clear_replay_stats", "is_memory_card_in_use", "shoot_single_bullet_between_coords", "get_model_dimensions", "set_fake_wanted_level", "is_bit_set", "using_mission_creator", "set_minigame_in_progress", "is_minigame_in_progress", "is_this_a_minigame_script", "is_sniper_inverted", "get_current_language", "get_profile_setting", "are_strings_equal", "compare_strings", "absi", "absf", "is_sniper_bullet_in_area", "is_projectile_in_area", "is_projectile_type_in_area", "is_projectile_type_in_angled_area", "is_bullet_in_angled_area", "is_bullet_in_area", "is_bullet_in_box", "has_bullet_impacted_in_area", "has_bullet_impacted_in_box", "is_orbis_version", "is_durango_version", "is_xbox360_version", "is_ps3_version", "is_pc_version", "is_aussie_version", "is_string_null", "is_string_null_or_empty", "string_to_int", "set_bits_in_range", "get_bits_in_range", "add_stunt_jump", "add_stunt_jump_angled", "delete_stunt_jump", "enable_stunt_jump_set", "disable_stunt_jump_set", "is_stunt_jump_in_progress", "cancel_stunt_jump", "set_game_paused", "set_this_script_can_be_paused", "set_this_script_can_remove_blips_created_by_any_script", "is_frontend_fading", "populate_now", "get_index_of_current_level", "set_gravity_level", "start_save_data", "stop_save_data", "register_int_to_save", "register_float_to_save", "register_bool_to_save", "register_text_label_to_save", "stop_save_struct", "stop_save_array", "create_incident", "create_incident_with_entity", "delete_incident", "is_incident_valid", "find_spawn_point_in_direction", "enable_tennis_mode", "is_tennis_mode", "reset_dispatch_ideal_spawn_distance", "set_dispatch_ideal_spawn_distance", "reset_dispatch_time_between_spawn_attempts", "set_dispatch_time_between_spawn_attempts", "set_dispatch_time_between_spawn_attempts_multiplier", "remove_dispatch_spawn_blocking_area", "reset_dispatch_spawn_blocking_areas", "display_onscreen_keyboard", "update_onscreen_keyboard", "get_onscreen_keyboard_result", "set_explosive_ammo_this_frame", "set_fire_ammo_this_frame", "set_explosive_melee_this_frame", "set_super_jump_this_frame", "play_ped_ringtone", "is_ped_ringtone_playing", "stop_ped_ringtone", "is_mobile_phone_call_ongoing", "create_new_scripted_conversation", "add_line_to_conversation", "add_ped_to_conversation", "set_microphone_position", "start_script_phone_conversation", "preload_script_phone_conversation", "start_script_conversation", "preload_script_conversation", "start_preloaded_conversation", "is_scripted_conversation_ongoing", "is_scripted_conversation_loaded", "get_current_scripted_conversation_line", "pause_scripted_conversation", "restart_scripted_conversation", "stop_scripted_conversation", "skip_to_next_scripted_conversation_line", "interrupt_conversation", "register_script_with_audio", "unregister_script_with_audio", "request_mission_audio_bank", "request_ambient_audio_bank", "request_script_audio_bank", "hint_ambient_audio_bank", "hint_script_audio_bank", "release_mission_audio_bank", "release_ambient_audio_bank", "release_named_script_audio_bank", "release_script_audio_bank", "get_sound_id", "release_sound_id", "play_sound", "play_sound_frontend", "play_sound_from_entity", "play_sound_from_coord", "stop_sound", "get_network_id_from_sound_id", "set_variable_on_sound", "set_variable_on_stream", "override_underwater_stream", "has_sound_finished", "override_trevor_rage", "reset_trevor_rage", "set_player_angry", "play_pain", "release_weapon_audio", "set_ambient_voice_name", "stop_current_playing_ambient_speech", "is_ambient_speech_playing", "is_scripted_speech_playing", "is_any_speech_playing", "is_ped_in_current_conversation", "set_ped_is_drunk", "set_animal_mood", "is_mobile_phone_radio_active", "set_mobile_phone_radio_state", "get_player_radio_station_index", "get_player_radio_station_name", "get_radio_station_name", "get_player_radio_station_genre", "is_radio_retuning", "set_radio_to_station_name", "set_veh_radio_station", "set_emitter_radio_station", "set_static_emitter_enabled", "set_radio_to_station_index", "set_frontend_radio_active", "unlock_mission_news_story", "get_number_of_passenger_voice_variations", "get_audible_music_track_text_id", "play_end_credits_music", "skip_radio_forward", "freeze_radio_station", "unfreeze_radio_station", "set_radio_auto_unfreeze", "set_initial_player_station", "set_user_radio_control_enabled", "set_radio_track", "set_vehicle_radio_loud", "set_mobile_radio_enabled_during_gameplay", "set_vehicle_radio_enabled", "find_radio_station_index", "set_ambient_zone_state", "clear_ambient_zone_state", "set_ambient_zone_list_state", "clear_ambient_zone_list_state", "set_ambient_zone_state_persistent", "set_ambient_zone_list_state_persistent", "is_ambient_zone_enabled", "set_cutscene_audio_override", "get_player_headset_sound_alternate", "play_police_report", "blip_siren", "override_veh_horn", "is_horn_active", "set_aggressive_horns", "is_stream_playing", "get_stream_play_time", "load_stream", "load_stream_with_start_offset", "play_stream_from_vehicle", "play_stream_from_object", "play_stream_frontend", "special_frontend_equal", "stop_stream", "stop_ped_speaking", "disable_ped_pain_audio", "is_ambient_speech_disabled", "set_siren_with_no_driver", "set_horn_enabled", "set_audio_vehicle_priority", "use_siren_as_horn", "set_vehicle_boost_active", "play_vehicle_door_open_sound", "play_vehicle_door_close_sound", "is_game_in_control_of_music", "set_gps_active", "play_mission_complete_audio", "is_mission_complete_playing", "start_audio_scene", "stop_audio_scene", "stop_audio_scenes", "is_audio_scene_active", "set_audio_scene_variable", "audio_is_scripted_music_playing", "prepare_music_event", "cancel_music_event", "trigger_music_event", "get_music_playtime", "prepare_alarm", "start_alarm", "stop_alarm", "stop_all_alarms", "is_alarm_playing", "get_vehicle_default_horn", "reset_ped_audio_flags", "set_audio_flag", "prepare_synchronized_audio_event", "prepare_synchronized_audio_event_for_scene", "play_synchronized_audio_event", "stop_synchronized_audio_event", "request_cutscene", "remove_cutscene", "has_cutscene_loaded", "has_this_cutscene_loaded", "set_cutscene_entity_model", "start_cutscene", "start_cutscene_at_coords", "stop_cutscene", "stop_cutscene_immediately", "set_cutscene_origin", "get_cutscene_time", "get_cutscene_total_duration", "was_cutscene_skipped", "has_cutscene_finished", "is_cutscene_active", "is_cutscene_playing", "get_cutscene_section_playing", "get_entity_index_of_cutscene_entity", "register_entity_for_cutscene", "get_entity_index_of_registered_entity", "set_cutscene_trigger_area", "can_set_enter_state_for_registered_entity", "can_set_exit_state_for_registered_entity", "can_set_exit_state_for_camera", "set_cutscene_fade_values", "register_synchronised_script_speech", "set_cutscene_ped_component_variation", "does_cutscene_entity_exist", "get_interior_group_id", "get_offset_from_interior_in_world_coords", "is_interior_scene", "is_valid_interior", "clear_room_for_entity", "force_room_for_entity", "get_room_key_from_entity", "get_key_for_entity_in_room", "get_interior_from_entity", "get_interior_at_coords", "add_pickup_to_interior_room_by_name", "unpin_interior", "is_interior_ready", "get_interior_from_collision", "refresh_interior", "disable_interior", "is_interior_disabled", "cap_interior", "is_interior_capped", "render_script_cams", "create_cam", "create_cam_with_params", "create_camera_with_params", "destroy_cam", "destroy_all_cams", "does_cam_exist", "set_cam_active", "is_cam_active", "is_cam_rendering", "get_rendering_cam", "get_cam_coord", "get_cam_rot", "get_cam_fov", "get_cam_near_clip", "get_cam_far_clip", "get_cam_far_dof", "set_cam_params", "set_cam_coord", "set_cam_rot", "set_cam_fov", "set_cam_near_clip", "set_cam_far_clip", "set_cam_near_dof", "set_cam_far_dof", "set_cam_dof_strength", "set_cam_dof_planes", "set_cam_motion_blur_strength", "attach_cam_to_entity", "attach_cam_to_ped_bone", "detach_cam", "set_cam_inherit_roll_vehicle", "point_cam_at_coord", "point_cam_at_entity", "point_cam_at_ped_bone", "stop_cam_pointing", "set_cam_debug_name", "add_cam_spline_node", "set_cam_spline_phase", "get_cam_spline_phase", "get_cam_spline_node_phase", "set_cam_spline_duration", "get_cam_spline_node_index", "override_cam_spline_velocity", "override_cam_spline_motion_blur", "is_cam_spline_paused", "set_cam_active_with_interp", "is_cam_interpolating", "shake_cam", "animated_shake_cam", "is_cam_shaking", "set_cam_shake_amplitude", "stop_cam_shaking", "play_cam_anim", "is_cam_playing_anim", "set_cam_anim_current_phase", "get_cam_anim_current_phase", "play_synchronized_cam_anim", "is_cam_transitioning", "is_screen_faded_out", "is_screen_faded_in", "is_screen_fading_out", "is_screen_fading_in", "do_screen_fade_in", "do_screen_fade_out", "set_widescreen_borders", "get_gameplay_cam_coord", "get_gameplay_cam_rot", "get_gameplay_cam_fov", "get_gameplay_cam_relative_heading", "set_gameplay_cam_relative_heading", "get_gameplay_cam_relative_pitch", "set_gameplay_cam_relative_pitch", "shake_gameplay_cam", "is_gameplay_cam_shaking", "set_gameplay_cam_shake_amplitude", "stop_gameplay_cam_shaking", "is_gameplay_cam_rendering", "is_gameplay_cam_looking_behind", "is_sphere_visible", "is_follow_ped_cam_active", "set_follow_ped_cam_cutscene_chat", "get_follow_ped_cam_zoom_level", "get_follow_ped_cam_view_mode", "set_follow_ped_cam_view_mode", "is_follow_vehicle_cam_active", "get_follow_vehicle_cam_zoom_level", "set_follow_vehicle_cam_zoom_level", "get_follow_vehicle_cam_view_mode", "set_follow_vehicle_cam_view_mode", "is_aim_cam_active", "is_first_person_aim_cam_active", "set_gameplay_coord_hint", "set_gameplay_ped_hint", "set_gameplay_vehicle_hint", "set_gameplay_entity_hint", "is_gameplay_hint_active", "stop_gameplay_hint", "set_gameplay_hint_fov", "get_is_multiplayer_brief", "set_cinematic_button_active", "is_cinematic_cam_rendering", "shake_cinematic_cam", "is_cinematic_cam_shaking", "set_cinematic_cam_shake_amplitude", "stop_cinematic_cam_shaking", "create_cinematic_shot", "is_cinematic_shot_active", "stop_cinematic_shot", "set_cinematic_mode_active", "stop_cutscene_cam_shaking", "enable_laser_sight_rendering", "get_weapontype_model", "get_weapontype_slot", "get_weapontype_group", "set_current_ped_weapon", "get_current_ped_weapon", "get_best_ped_weapon", "set_current_ped_vehicle_weapon", "get_current_ped_vehicle_weapon", "is_ped_armed", "is_weapon_valid", "has_ped_got_weapon", "get_ped_weapontype_in_slot", "get_ammo_in_ped_weapon", "add_ammo_to_ped", "set_ped_ammo", "set_ped_infinite_ammo", "give_weapon_to_ped", "give_delayed_weapon_to_ped", "remove_all_ped_weapons", "remove_weapon_from_ped", "hide_ped_weapon_for_scripted_cutscene", "set_ped_current_weapon_visible", "set_ped_drops_weapons_when_dead", "has_ped_been_damaged_by_weapon", "clear_ped_last_weapon_damage", "has_entity_been_damaged_by_weapon", "clear_entity_last_weapon_damage", "set_ped_drops_weapon", "set_ped_drops_inventory_weapon", "get_max_ammo_in_clip", "get_ammo_in_clip", "set_ammo_in_clip", "get_max_ammo", "set_ped_ammo_by_type", "get_ped_ammo_by_type", "set_ped_ammo_to_drop", "get_ped_last_weapon_impact_coord", "set_ped_gadget", "get_selected_ped_weapon", "explode_projectiles", "remove_all_projectiles_of_type", "has_vehicle_got_projectile_attached", "give_weapon_component_to_ped", "remove_weapon_component_from_ped", "has_ped_got_weapon_component", "is_ped_weapon_component_active", "make_ped_reload", "request_weapon_asset", "has_weapon_asset_loaded", "remove_weapon_asset", "create_weapon_object", "give_weapon_component_to_weapon_object", "remove_weapon_component_from_weapon_object", "has_weapon_got_weapon_component", "give_weapon_object_to_ped", "get_weapon_object_from_ped", "set_ped_weapon_tint_index", "get_ped_weapon_tint_index", "set_weapon_object_tint_index", "get_weapon_object_tint_index", "get_weapon_tint_count", "get_weapon_hud_stats", "get_weapon_component_hud_stats", "get_weapon_clip_size", "set_weapon_smokegrenade_assigned", "set_weapon_animation_override", "get_weapon_damage_type", "create_itemset", "destroy_itemset", "is_itemset_valid", "add_to_itemset", "remove_from_itemset", "get_itemset_size", "get_indexed_item_in_itemset", "is_in_itemset", "clean_itemset", "load_all_objects_now", "load_scene", "network_update_load_scene", "network_stop_load_scene", "is_network_loading_scene", "set_interior_active", "request_model", "has_model_loaded", "set_model_as_no_longer_needed", "is_model_in_cdimage", "is_model_valid", "is_model_a_vehicle", "request_collision_at_coord", "request_collision_for_model", "has_collision_for_model_loaded", "request_additional_collision_at_coord", "request_anim_dict", "has_anim_dict_loaded", "remove_anim_dict", "request_anim_set", "has_anim_set_loaded", "remove_anim_set", "request_clip_set", "has_clip_set_loaded", "remove_clip_set", "request_ipl", "remove_ipl", "is_ipl_active", "set_streaming", "set_game_pauses_for_streaming", "set_reduce_ped_model_budget", "set_reduce_vehicle_model_budget", "set_ditch_police_models", "get_number_of_streaming_requests", "request_ptfx_asset", "has_ptfx_asset_loaded", "remove_ptfx_asset", "set_vehicle_population_budget", "set_ped_population_budget", "clear_focus", "set_focus_entity", "is_entity_focus", "new_load_scene_start", "new_load_scene_stop", "is_new_load_scene_active", "is_new_load_scene_loaded", "start_player_switch", "stop_player_switch", "stop_player_remain_arcade", "get_player_switch_type", "get_ideal_player_switch_type", "get_player_switch_state", "get_player_short_switch_state", "set_player_inverted_up", "destroy_player_in_pause_menu", "prefetch_srl", "is_srl_loaded", "begin_srl", "end_srl", "set_srl_time", "set_hd_area", "clear_hd_area", "request_script", "set_script_as_no_longer_needed", "has_script_loaded", "does_script_exist", "terminate_thread", "is_thread_active", "get_id_of_this_thread", "terminate_this_thread", "get_this_script_name", "get_number_of_events", "get_event_exists", "get_event_at_index", "get_event_data", "trigger_script_event", "shutdown_loading_screen", "set_no_loading_screen", "add_text_component_integer", "add_text_component_float", "add_text_component_substring_time", "clear_prints", "clear_brief", "clear_all_help_messages", "clear_this_print", "clear_small_prints", "does_text_block_exist", "request_additional_text", "has_additional_text_loaded", "clear_additional_text", "is_streaming_additional_text", "has_this_additional_text_loaded", "is_message_being_displayed", "does_text_label_exist", "get_length_of_string_with_this_text_label", "get_length_of_literal_string", "get_street_name_from_hash_key", "is_hud_preference_switched_on", "is_radar_preference_switched_on", "is_subtitle_preference_switched_on", "display_hud", "display_radar", "is_hud_hidden", "is_radar_hidden", "set_blip_route", "set_blip_route_colour", "add_next_message_to_previous_briefs", "responding_as_temp", "set_radar_zoom", "get_hud_colour", "flash_ability_bar", "set_ability_bar_value", "flash_wanted_display", "set_text_scale", "set_text_colour", "set_text_centre", "set_text_right_justify", "set_text_wrap", "set_text_leading", "set_text_proportional", "set_text_font", "set_text_drop_shadow", "set_text_dropshadow", "set_text_outline", "set_text_edge", "set_text_render_id", "get_default_script_rendertarget_render_id", "register_named_rendertarget", "is_named_rendertarget_registered", "release_named_rendertarget", "link_named_rendertarget", "get_named_rendertarget_render_id", "is_named_rendertarget_linked", "clear_help", "is_help_message_on_screen", "is_help_message_being_displayed", "is_help_message_fading_out", "get_number_of_active_blips", "get_next_blip_info_id", "get_first_blip_info_id", "get_blip_info_id_coord", "get_blip_info_id_display", "get_blip_info_id_type", "get_blip_info_id_entity_index", "get_blip_info_id_pickup_index", "get_blip_from_entity", "add_blip_for_radius", "add_blip_for_entity", "add_blip_for_pickup", "add_blip_for_coord", "set_blip_coords", "get_blip_coords", "set_blip_sprite", "get_blip_sprite", "set_blip_name_from_text_file", "set_blip_name_to_player_name", "set_blip_alpha", "get_blip_alpha", "set_blip_fade", "set_blip_rotation", "set_blip_flash_timer", "set_blip_flash_interval", "set_blip_colour", "set_blip_secondary_colour", "get_blip_colour", "get_blip_hud_colour", "is_blip_short_range", "is_blip_on_minimap", "set_blip_high_detail", "set_blip_as_mission_creator_blip", "is_mission_creator_blip", "disable_blip_name_for_var", "set_blip_flashes", "set_blip_flashes_alternate", "is_blip_flashing", "set_blip_as_short_range", "set_blip_scale", "set_blip_priority", "set_blip_display", "set_blip_category", "remove_blip", "set_blip_as_friendly", "pulse_blip", "show_number_on_blip", "hide_number_on_blip", "does_blip_exist", "set_waypoint_off", "refresh_waypoint", "is_waypoint_active", "set_new_waypoint", "set_blip_bright", "set_blip_show_cone", "set_minimap_component", "get_main_player_blip_id", "hide_loading_on_fade_this_frame", "set_radar_as_interior_this_frame", "set_radar_as_exterior_this_frame", "set_widescreen_format", "display_area_name", "display_cash", "display_ammo_this_frame", "display_sniper_scope_this_frame", "hide_hud_and_radar_this_frame", "set_multiplayer_bank_cash", "remove_multiplayer_bank_cash", "set_multiplayer_hud_cash", "remove_multiplayer_hud_cash", "hide_help_text_this_frame", "display_help_text_this_frame", "set_gps_flags", "clear_gps_flags", "clear_gps_race_track", "clear_gps_player_waypoint", "set_gps_flashes", "flash_minimap_display", "toggle_stealth_radar", "key_hud_colour", "set_mission_name", "set_minimap_block_waypoint", "lock_minimap_angle", "unlock_minimap_angle", "lock_minimap_position", "unlock_minimap_position", "is_hud_component_active", "is_scripted_hud_component_active", "hide_scripted_hud_component_this_frame", "hide_hud_component_this_frame", "show_hud_component_this_frame", "reset_reticule_values", "reset_hud_component_values", "set_hud_component_position", "get_hud_component_position", "clear_floating_help", "add_trevor_random_modifier", "get_current_website_id", "set_warning_message", "set_dance_mappers", "activate_frontend_menu", "restart_frontend_menu", "set_pause_menu_active", "disable_frontend_this_frame", "set_frontend_active", "is_pause_menu_active", "get_pause_menu_state", "is_pause_menu_restarting", "object_decal_toggle", "enable_deathblood_seethrough", "set_userids_uihidden", "clear_ped_in_pause_menu", "give_ped_to_pause_menu", "hide_special_ability_lockon_operation", "set_debug_lines_and_spheres_drawing_active", "draw_debug_line", "draw_debug_line_with_two_colours", "draw_debug_sphere", "draw_debug_box", "draw_debug_text", "draw_debug_text_2d", "draw_line", "draw_poly", "melee_seethrough_skipped", "get_maximum_number_of_photos", "draw_light_with_range", "draw_spot_light", "draw_marker", "create_checkpoint", "set_checkpoint_cylinder_height", "set_checkpoint_rgba", "delete_checkpoint", "request_streamed_texture_dict", "has_streamed_texture_dict_loaded", "set_streamed_texture_dict_as_no_longer_needed", "draw_rect", "draw_sprite", "add_entity_icon", "add_entity_icon_by_vector", "does_entity_have_icon_id", "set_entity_icon_visibility", "set_entity_icon_id_visibility", "set_entity_icon_color", "set_entity_icon_id_color", "set_draw_origin", "clear_draw_origin", "attach_tv_audio_to_entity", "set_tv_audio_frontend", "load_movie_mesh_set", "release_movie_mesh_set", "get_screen_resolution", "get_is_widescreen", "get_is_hidef", "set_nightvision", "set_noiseoveride", "set_noisinessoveride", "get_texture_resolution", "set_flash", "create_tracked_point", "set_tracked_point_info", "is_tracked_point_visible", "destroy_tracked_point", "set_seethrough", "seethrough_reset", "is_particle_fx_delayed_blink", "start_particle_fx_non_looped_at_coord", "start_particle_fx_non_looped_on_ped_bone", "start_particle_fx_non_looped_on_entity", "set_particle_fx_non_looped_alpha", "start_particle_fx_looped_at_coord", "start_particle_fx_looped_on_ped_bone", "start_particle_fx_looped_on_entity", "stop_particle_fx_looped", "remove_particle_fx", "remove_particle_fx_from_entity", "remove_particle_fx_in_range", "does_particle_fx_looped_exist", "set_particle_fx_looped_offsets", "set_particle_fx_looped_evolution", "set_particle_fx_looped_colour", "set_particle_fx_looped_alpha", "set_particle_fx_looped_scale", "set_particle_fx_cam_inside_vehicle", "set_particle_fx_blood_scale", "set_camera_endtime", "wash_decals_in_range", "wash_decals_from_vehicle", "fade_decals_in_range", "remove_decals_in_range", "remove_decals_from_object", "remove_decals_from_object_facing", "remove_decals_from_vehicle", "add_decal", "add_petrol_decal", "set_camera_camera_forward", "remove_decal", "is_decal_alive", "get_decal_wash_level", "move_vehicle_decals", "disable_vehicle_distantlights", "set_timecycle_modifier", "set_timecycle_modifier_strength", "set_transition_timecycle_modifier", "clear_timecycle_modifier", "get_timecycle_modifier_index", "push_timecycle_modifier", "pop_timecycle_modifier", "request_scaleform_movie", "has_scaleform_movie_loaded", "set_scaleform_movie_as_no_longer_needed", "draw_scaleform_movie", "sitting_tv", "set_tv_channel", "get_tv_channel", "set_tv_volume", "get_tv_volume", "draw_tv_channel", "enable_movie_subtitles", "stat_load", "stat_save", "stat_load_pending", "stat_save_pending", "stat_delete_slot", "stat_set_int", "stat_set_float", "stat_set_bool", "stat_set_date", "stat_set_string", "stat_set_pos", "stat_set_masked_int", "stat_set_user_id", "stat_get_int", "stat_get_float", "stat_get_bool", "stat_get_date", "stat_get_string", "stat_get_pos", "stat_get_masked_int", "stat_get_user_id", "stat_increment", "stat_get_bool_masked", "stat_set_bool_masked", "playstats_npc_invite", "playstats_award_xp", "playstats_rank_up", "playstats_mission_started", "playstats_mission_over", "playstats_mission_checkpoint", "playstats_race_checkpoint", "playstats_post_match_blob", "playstats_match_started", "playstats_match_ended", "playstats_shop_item", "playstats_friend_activity", "playstats_oddjob_done", "playstats_prop_change", "playstats_cloth_change", "playstats_cheat_applied", "leaderboards_get_number_of_columns", "leaderboards_get_column_id", "leaderboards_get_column_type", "leaderboards_read_clear_all", "leaderboards_read_clear", "leaderboards_read_pending", "leaderboards_read_successful", "leaderboards2_read_friends_by_row", "leaderboards2_read_by_handle", "leaderboards2_read_by_row", "leaderboards2_read_by_rank", "leaderboards2_read_by_radius", "leaderboards2_read_by_score_int", "leaderboards2_read_by_score_float", "leaderboards2_write_data", "leaderboards_cache_data_row", "leaderboards_clear_cache_data", "leaderboards_get_cache_exists", "leaderboards_get_cache_time", "leaderboards_get_cache_data_row", "add_script_to_random_ped", "register_object_script_brain", "is_object_within_brain_activation_range", "register_world_point_script_brain", "is_world_point_within_brain_activation_range", "enable_script_brain_set", "disable_script_brain_set", "create_mobile_phone", "destroy_mobile_phone", "set_mobile_phone_scale", "set_mobile_phone_rotation", "get_mobile_phone_rotation", "set_mobile_phone_position", "get_mobile_phone_position", "script_is_moving_mobile_phone_offscreen", "can_phone_be_seen_on_screen", "cell_cam_activate", "cell_cam_is_char_visible_no_face_check", "get_mobile_phone_render_id", "app_data_valid", "app_get_int", "app_get_float", "app_get_string", "app_set_int", "app_set_float", "app_set_string", "app_set_app", "app_set_block", "app_clear_block", "app_close_app", "app_close_block", "app_has_synced_data", "app_save_data", "app_delete_app_data", "set_clock_time", "pause_clock", "add_to_clock_time", "get_clock_hours", "get_clock_minutes", "get_clock_seconds", "set_clock_date", "get_clock_day_of_week", "get_clock_day_of_month", "get_clock_month", "get_clock_year", "get_posix_time", "get_local_time", "set_roads_in_area", "set_roads_in_angled_area", "set_ped_paths_in_area", "get_safe_coord_for_ped", "get_closest_vehicle_node", "get_closest_major_vehicle_node", "get_closest_vehicle_node_with_heading", "get_nth_closest_vehicle_node", "get_nth_closest_vehicle_node_id", "get_nth_closest_vehicle_node_with_heading", "get_nth_closest_vehicle_node_id_with_heading", "get_nth_closest_vehicle_node_favour_direction", "get_vehicle_node_properties", "is_vehicle_node_id_valid", "get_vehicle_node_position", "get_closest_road", "load_all_path_nodes", "set_roads_back_to_original", "set_roads_back_to_original_in_angled_area", "set_ped_paths_back_to_original", "get_random_vehicle_node", "get_street_name_at_coord", "generate_directions_to_coord", "set_ignore_no_gps_flag", "set_gps_disabled_zone", "is_point_on_road", "add_navmesh_required_region", "remove_navmesh_required_regions", "disable_navmesh_in_area", "are_all_navmesh_regions_loaded", "is_navmesh_loaded_in_area", "add_navmesh_blocking_object", "update_navmesh_blocking_object", "remove_navmesh_blocking_object", "calculate_travel_distance_between_points", "is_control_enabled", "is_control_pressed", "is_control_released", "is_control_just_pressed", "is_control_just_released", "get_control_value", "get_control_normal", "is_disabled_control_pressed", "is_disabled_control_just_pressed", "is_disabled_control_just_released", "get_disabled_control_normal", "set_pad_shake", "stop_pad_shake", "set_control_shake", "is_look_inverted", "set_playerpad_shakes_when_controller_disabled", "set_input_exclusive", "disable_control_action", "enable_control_action", "disable_all_control_actions", "enable_all_control_actions", "datafile_create", "datafile_delete", "preload_find", "focus_use_spline", "overide_texturenames", "start_script_fire", "remove_script_fire", "start_entity_fire", "stop_entity_fire", "is_entity_on_fire", "get_number_of_fires_in_range", "stop_fire_in_range", "get_closest_fire_pos", "add_explosion", "add_owned_explosion", "is_explosion_in_area", "is_explosion_in_sphere", "is_explosion_in_angled_area", "set_decision_maker", "clear_decision_maker_event_response", "add_shocking_event_at_position", "add_shocking_event_for_entity", "is_shocking_event_in_sphere", "remove_shocking_event", "remove_all_shocking_events", "get_zone_at_coords", "get_zone_popschedule", "get_name_of_zone", "set_zone_enabled", "get_zone_scumminess", "add_rope", "delete_rope", "delete_child_rope", "does_rope_exist", "load_rope_data", "pin_rope_vertex", "unpin_rope_vertex", "get_rope_vertex_count", "attach_entities_to_rope", "attach_rope_to_entity", "detach_rope_from_entity", "get_rope_last_vertex_coord", "get_rope_vertex_coord", "rope_load_textures", "rope_unload_textures", "rope_force_length", "rope_reset_length", "set_damping", "activate_physics", "break_entity_glass", "set_disable_breaking", "get_water_height", "get_water_height_no_waves", "modify_water", "network_is_signed_in", "network_is_signed_online", "network_is_cloud_available", "network_is_host", "network_is_rockstar_dev", "network_have_online_privileges", "network_bail", "network_can_enter_multiplayer", "network_session_enter", "network_session_host", "network_session_host_friends_only", "network_session_end", "network_session_kick_player", "network_is_finding_gamers", "network_get_num_found_gamers", "network_get_found_gamer", "network_clear_found_gamers", "network_is_player_animation_drawing_synchronized", "network_session_cancel_invite", "network_has_pending_invite", "network_session_get_inviter", "network_suppress_invite", "network_block_invites", "network_session_host_single_player", "network_session_leave_single_player", "network_is_game_in_progress", "network_is_session_active", "network_is_in_session", "network_is_session_started", "network_is_session_busy", "network_can_session_end", "network_is_unlocked", "network_session_voice_host", "network_session_voice_leave", "network_set_keep_focuspoint", "network_set_activity_spectator", "network_is_activity_spectator", "network_set_activity_spectator_max", "network_get_activity_player_max", "network_get_activity_player_num", "network_is_activity_spectator_from_handle", "network_host_transition", "network_invite_gamer_to_transition", "network_invite_gamers_to_transition", "network_set_gamer_invited_to_transition", "network_leave_transition", "network_launch_transition", "network_do_transition_to_game", "network_do_transition_to_new_game", "network_do_transition_to_freemode", "network_do_transition_to_new_freemode", "network_is_transition_to_game", "network_get_transition_members", "network_send_transition_gamer_instruction", "network_mark_transition_gamer_as_fully_joined", "network_is_transition_host", "network_is_transition_host_from_handle", "network_get_transition_host", "network_is_in_transition", "network_is_transition_started", "network_is_transition_busy", "network_has_player_started_transition", "network_join_transition", "network_set_transition_creator_handle", "network_clear_transition_creator_handle", "network_is_activity_session", "network_accept_presence_invite", "network_get_presence_invite_handle", "network_remove_all_invites", "network_remove_transition_invite", "network_invite_gamer", "network_invite_gamers", "network_get_currently_selected_gamer_handle_from_invite_menu", "network_set_currently_selected_gamer_handle_from_invite_menu", "fillout_pm_player_list", "fillout_pm_player_list_with_names", "using_network_weapontype", "network_is_in_party", "network_is_party_member", "is_gamertag_cache_reloaded", "network_player_is_cheater", "network_set_this_script_is_network_script", "network_get_this_script_is_network_script", "network_get_script_status", "network_register_host_broadcast_variables", "network_register_player_broadcast_variables", "network_get_player_index", "network_get_participant_index", "network_get_num_connected_players", "network_is_player_connected", "network_is_participant_active", "network_is_player_active", "network_is_player_a_participant", "network_is_host_of_this_script", "network_get_host_of_this_script", "network_get_host_of_script", "network_set_mission_finished", "network_is_script_active", "participant_id", "participant_id_to_int", "network_get_killer_of_player", "network_get_destroyer_of_network_id", "network_get_entity_killer_of_player", "network_resurrect_local_player", "network_set_local_player_invincible_time", "network_is_local_player_invincible", "network_get_network_id_from_entity", "network_get_entity_from_network_id", "network_get_entity_is_local", "network_does_network_id_exist", "network_does_entity_exist_with_network_id", "network_request_control_of_network_id", "network_has_control_of_network_id", "network_request_control_of_entity", "network_request_control_of_door", "network_has_control_of_entity", "network_has_control_of_pickup", "network_has_control_of_door", "veh_to_net", "ped_to_net", "obj_to_net", "net_to_veh", "net_to_ped", "net_to_obj", "net_to_ent", "network_get_local_handle", "network_handle_from_user_id", "network_handle_from_member_id", "network_handle_from_player", "network_handle_from_friend", "network_gamertag_from_handle_start", "network_gamertag_from_handle_pending", "network_gamertag_from_handle_succeeded", "network_get_gamertag_from_handle", "network_are_handles_the_same", "network_is_handle_valid", "network_get_player_from_gamer_handle", "network_member_id_from_gamer_handle", "network_is_gamer_in_my_session", "network_show_profile_ui", "network_get_game_region", "network_player_get_name", "network_player_is_rockstar_dev", "network_is_inactive_profile", "network_get_max_friends", "network_get_friend_count", "network_get_friend_name", "network_is_friend_online", "network_is_friend_in_same_title", "network_is_friend_in_multiplayer", "network_is_friend", "network_is_pending_friend", "network_is_adding_friend", "network_add_friend", "clear_player_bailed_from_playericle", "get_obj_entity", "network_can_set_waypoint", "network_has_headset", "vehicle_net_attach_char_to_char_physically", "network_gamer_has_headset", "network_is_gamer_talking", "network_can_communicate_with_gamer", "network_is_gamer_muted_by_me", "network_is_player_talking", "network_player_has_headset", "network_set_player_muted", "network_is_player_muted_by_me", "network_am_i_muted_by_player", "network_is_player_blocked_by_me", "network_am_i_blocked_by_player", "network_get_player_loudness", "network_set_talker_proximity", "network_get_talker_proximity", "network_set_voice_active", "network_set_team_only_chat", "network_set_override_spectator_mode", "network_set_voice_channel", "is_network_vehicle_been_damaged_by_any_object", "shutdown_and_launch_single_player_game", "network_set_friendly_fire_option", "network_set_rich_presence", "network_clan_player_is_active", "network_clan_player_get_desc", "network_clan_download_membership", "network_clan_download_membership_pending", "network_clan_get_membership_count", "network_clan_get_membership_valid", "network_clan_get_membership", "network_clan_join", "set_network_id_can_migrate", "set_network_id_exists_on_all_machines", "network_set_entity_can_blend", "set_network_id_visible_in_cutscene", "set_local_player_visible_in_cutscene", "set_local_player_invisible_locally", "set_local_player_visible_locally", "set_player_invisible_locally", "set_player_visible_locally", "fade_out_local_player", "network_fade_out_entity", "network_fade_in_entity", "is_player_in_cutscene", "set_entity_visible_in_cutscene", "set_entity_locally_invisible", "set_entity_locally_visible", "is_damage_tracker_active_on_network_id", "activate_damage_tracker_on_network_id", "is_sphere_visible_to_another_machine", "is_sphere_visible_to_player", "reserve_network_mission_objects", "reserve_network_mission_peds", "reserve_network_mission_vehicles", "can_register_mission_objects", "can_register_mission_peds", "can_register_mission_vehicles", "can_register_mission_entities", "get_num_reserved_mission_objects", "get_num_reserved_mission_peds", "get_num_reserved_mission_vehicles", "get_network_time", "get_time_offset", "get_time_difference", "network_set_in_spectator_mode", "network_is_in_spectator_mode", "network_set_in_mp_cutscene", "network_is_in_mp_cutscene", "network_is_player_in_mp_cutscene", "set_network_vehicle_respot_timer", "use_player_colour_instead_of_team_colour", "network_create_synchronised_scene", "network_add_ped_to_synchronised_scene", "network_add_entity_to_synchronised_scene", "network_attach_synchronised_scene_to_entity", "network_start_synchronised_scene", "network_stop_synchronised_scene", "network_get_respawn_result", "network_end_tutorial_session", "network_is_in_tutorial_session", "network_override_clock_time", "network_add_entity_area", "network_remove_entity_area", "network_does_tunable_exist", "network_reset_body_tracker", "network_explode_vehicle", "network_set_property_id", "set_store_enabled", "cloud_request_member_file", "set_balance_add_machine", "set_balance_add_machines", "texture_download_request", "texture_download_release", "texture_download_get_name", "network_check_give_player_cash", "network_check_receive_player_cash", "network_give_player_jobshare_cash", "network_receive_player_jobshare_cash", "network_earn_from_bounty", "network_buy_item", "network_spent_buy_wantedlevel", "network_spent_pay_vehicle_insurance_premium", "network_spent_call_player", "network_spent_bounty", "network_delete_character", "network_earn_from_pickup", "network_earn_from_betting", "network_earn_from_job", "network_earn_from_holdups", "network_earn_from_property", "network_earn_from_rockstar", "network_earn_from_vehicle", "network_earn_from_bank_interest", "network_spent_taxi", "network_spent_betting", "network_buy_healthcare", "network_buy_airstrike", "network_spent_ammo_drop", "network_buy_bounty", "network_buy_property", "network_buy_smokes", "network_spent_heli_pickup", "network_spent_boat_pickup", "network_spent_cash_drop", "network_spent_carwash", "network_spent_cinema", "network_spent_telescope", "network_spent_holdups", "network_spent_bank_interest", "network_can_receive_player_cash", "init_shop_ped_component", "init_shop_ped_prop", "get_shop_ped_query_component", "get_shop_ped_component", "get_shop_ped_query_prop", "get_shop_ped_prop", "get_forced_component", "get_forced_prop", "get_shop_ped_query_outfit", "get_shop_ped_outfit_prop", "get_shop_ped_outfit_component", "get_dlc_vehicle_model", "get_dlc_vehicle_data", "get_dlc_vehicle_flags", "get_dlc_weapon_data", "get_dlc_weapon_component_data", "is_dlc_present", "wait", "waitunwarped", "waitunpaused", "start_new_script", "start_new_script_with_args", "timera", "timerb", "settimera", "settimerb", "timestep", "sin", "cos", "sqrt", "pow", "vmag", "vmag2", "vdist", "vdist2", "shift_left", "shift_right", "floor", "ceil", "round", "to_float", "clear_text_label", "sc_inbox_message_get_data_int", "sc_inbox_message_get_data_float", "sc_inbox_message_get_data_string", "sc_inbox_message_get_ugcdata" };
    }
}
